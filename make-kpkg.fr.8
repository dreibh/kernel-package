.\" Hey, Emacs! This is an -*- nroff -*- source file.
.\" Copyright (c) 1997 Manoj Srivastava <srivasta@debian.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\"
.\"    $Id: make-kpkg.8,v 1.76 2003/09/28 01:16:52 srivasta Exp $
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH MAKE\-KPKG 1 "14 nov. 2002" Debian "Manuel Debian GNU/Linux"
.SH NOM
make\-kpkg \- construit des paquets Debian du noyau à partir des sources du
noyau Linux
.SH SYNOPSIS
\fBmake\-kpkg\fP \fI[options]\fP \&[cible [cible ...]]
.SH DESCRIPTION
Cette page de manuel décrit l'utilitaire Debian make\-kpkg, utilisé pour
créer les paquets Debian concernant le noyau. Cet utilitaire doit être lancé
à partir du répertoire racine des sources du noyau Linux, qui doit avoir été
préalablement configuré (à moins que vous n'utilisiez la cible «\ configure\ »). Normalement, si kernel\-package ne trouve pas de fichier \fI.config\fP dans
le répertoire courant, il essaye absolument d'en trouver un autre qui fera
l'affaire (en fait, un fichier de configuration déjà préréglé pour les
noyaux Debian sur cette architecture) puis lancera un \fBmake oldconfig\fP pour
permettre à l'utilisateur de répondre à toute nouvelle
question. Typiquement, vous exécutez cette commande en tant que root ou avec
\fBfakeroot\fP, ou encore en indiquant à \fBmake\-kpkg\fP comment devenir root,
comme ceci\ :
.sp 1
.ti +5
make\-kpkg \-\-rootcmd fakeroot kernel_image
.sp 1
Le paquet Debian sera créé dans le répertoire parent des sources du noyau
depuis lequel la commande a été lancée.
.PP
De plus, sachez que certaines versions de gcc ne fonctionnent pas très bien
avec les sources du noyau (gcc\ 2.95 rencontre des problèmes de compilation
du noyau si l'option de compilation «\ \-fno\-strict\-aliasing\ ») n'est pas
utilisée. Ce problème a été réglé pour les noyaux récents (les séries 2.2 et
2.4) (pour les noyaux plus anciens, vous risquez d'avoir à modifier le
Makefile). Vous pouvez indiquer la version de gcc à utiliser pour la
compilation du noyau en définissant les variables CC et HOSTCC du Makefile
(le Makefile du premier niveau). Cela se fait tout simplement grâce à\ :
.PP
  % MAKEFLAGS="CC=gcc\-2.95" make\-kpkg ...
.PP
(Consultez le Makefile de premier niveau afin de connaître les variables qui
peuvent être définies.)
.PP
\fBATTENTION\ :\fP Ne définissez pas l'option \-j directement dans MAKEFLAGS,
cela risque de faire échouer la construction. Utilisez CONCURRENCY_LEVEL
comme défini plus loin.
.SH OPTIONS
\fB\-\-help\fP affiche un message d'aide.
.TP 
\fB\-\-revision\fP numéro
Modifie le numéro de révision Debian des paquets créés avec ce \fBnuméro\fP. Il
y a quelques contraintes d'utilisation\ : l'option \-\-revision n'a d'effets
que pendant la phase de configuration. En d'autres termes, si le fichier
\fIstamp\-configure\fP existe, cette option n'aura pas d'effet. Exécutez
b<make\-kpkg clean> ou supprimez vous\-même \fIstamp\-configure\fP et
\fIstamp\-debian\fP afin que l'option fonctionne. Il est recommandé avec
insistance d'utiliser \fBmake\-kpkg clean\fP sauf si vous êtes sûr de ce que
vous faites. De plus, les responsables officiels des paquets des sources
fournissent leurs propres numéros de versions et données pour leurs envois
officiels dans l'archive \fBDebian\fP, ce qui entraîne qu'un certain nombre de
choses, dont le numéro de révision \fBDebian\fP, ne seront pas modifiées par
\fBmake\-kpkg\fP. S'il vous arrive d'avoir une source officielle, (il y a alors
un fichier debian/official qui ne doit pas être vide), et que vous voulez
utiliser votre propre numéro de révision, pensez bien à supprimer
debian/official avant de lancer \fBmake\-kpkg clean\fP si vous voulez que cette
option fasse effet. Par conséquent, si vous voulez relancer \fBmake\-kpkg\fP
avec un numéro de révision différent, assurez\-vous de commencer avec une
structure propre. Ensuite, le numéro de version doit être composé uniquement
de caractères alphanumériques, des caractères + et . (plus et point), et
doit impérativement comporter un chiffre (consultez la charte Debian pour
plus d'informations). \fIEn fait, c'est un mensonge. Les responsables
officiels du noyau et des modules\fP ont une dispense spéciale qui leur permet
l'usage du trait d'union, mais cela est fortement déconseillé à la plupart
des gens, puisqu'aucune correction du numéro de version n'est faite, et dpkg
et autres risquent de planter en fin de compilation sans qu'il soit possible
de déterminer précisément d'où cela vient. Enfin, vous pouvez préfixer la
version d'un chiffre suivi de deux points (:). La valeur par défaut est
\fB10.0.0.Custom\fP à moins que la variable d'environnement
\fBDEBIAN_REVISION_MANDATORY\fP ne soit activée, auquel cas une erreur est
générée si le numéro de version est omis dans la ligne de commande ou le
fichier de configuration.
.TP 
\fB\-\-append\-to\-version\fP toto
.TP 
\fB\-\-append_to_version\fP toto
Cet argument (\fBtoto\fP) est ajouté à la valeur de la variable EXTRAVERSION du
Makefile du noyau. Puisque EXTRAVERSION est un des composants du numéro de
version du noyau, il est aussi ajouté au nom du paquet Debian, et en tant
que tel, doit répondre aux contraintes de la charte concernant les noms de
paquets. Ce qui veut dire qu'il ne doit contenir que des caractères
alphanumériques \fBminuscules\fP et les caractères \-, + et . (moins, plus et
point). Les lettres majuscules ne sont pas autorisées par la Charte pour un
nouveau paquet. Si la variable d'environnement \fBIGNORE_UPPERCASE_VERSION\fP
est définie, make\-kpkg écrira le numéro de version défini dans le Makefile
ou dans le fichier \fIlocalversion\fP en minuscules. Cet argument est
prioritaire sur la variable d'environnement \fBAPPEND_TO_VERSION\fP. Notez bien
que vous \fB\s-1devez\s0\fP lancer \fBmake\-kpkg\fP \fIclean\fP après avoir configuré
le noyau avec \fImake (x|menu)?config\fP, puisque celui\-ci génère le fichier
\fIinclude/linux/version.h\fP sans la valeur \fIappend_to_version\fP (toto). Ce
fichier ne sera pas modifié par le lancement de make\-kpkg (make\-kpkg crée
version.h s'il n'existe pas, mais ne le modifie pas s'il existe), et donc le
noyau final n'aura pas la valeur append_to_version dans son numéro de
version, et ira chercher les modules et les symboles aux mauvais
endroits. Le plus simple est soit de supprimer include/linux/version.h après
la configuration et avant la compilation, soit de lancer make\-kpkg clean
après la configuration, et avant la compilation. Notez aussi qu'une fois que
vous avez utilisé \-\-append_to_version toto pour la configuration ou la
construction du kernel\-image, vous devez aussi utiliser la même option lors
de lancements ultérieurs de make\-kpkg (par exemple, pour construire des
modules indépendants, ou autres). make\-kpkg ne se souvient pas de l'argument
toto à chacun des lancements de la commande (ce comportement est différent
de \-\-revision, qui est lui persistant lors des différents lancements). Si
vous en avez assez de voir make\-kpkg se plaindre de l'utilisation de
\-\-append_to_version alors qu'il y a déjà un fichier créé précédemment, vous
pouvez définir la variable d'environnement VERSION_H_OK, ce qui fera cesser
cet avertissement.
.TP 
\fB\-\-added\-modules\ toto\fP
.TP 
\fB\-\-added_modules\ toto\fP
Cet argument se présente sous la forme d'une liste de modules additionnels
séparés par des virgules (modules non inclus dans l'arborescence principale
du noyau) que vous souhaitez construire lorsque vous invoquez les cibles
modules_truc. Vous devez indiquer le chemin complet des répertoires
contenant les modules, ou simplement le nom du module s'il peut être trouvé
dans \fBMODULE_LOC\fP, qui pointe par défaut sur \fI/usr/src/modules\fP. Le
comportement par défaut compile tous les modules qui sont dans
\fBMODULE_LOC\fP, quand les cibles modules_truc sont demandées.
.TP 
\fB\-\-added\-patches\ truc\fP
.TP 
\fB\-\-added_patches\ truc\fP
Cet argument (truc) doit être une liste de patches additionnels pour les
sources du noyau séparés par des virgules. L'option de configuration
\fIpatch_the_kernel\fP sera alors automatiquement réglée à «\ YES\ ».
.IP
Contrairement à la gestion des modules, vous pouvez n'indiquer que le nom du
fichier de patch (et pas le chemin complet du fichier). De plus, tout patch
qui essaye de modifier le numéro de version, que ce soit par l'édition du
\fBMakefile\fP, ou par l'ajout d'un fichier \fB.localversion\fP, ne fonctionnera
pas, et interrompera la compilation, puisqu'un numéro de version a déjà été
défini dans \fIdebian/changelog\fP.
.IP
Pour chaque fichier <nom_patch> de la liste, l'algorithme suivant
est appliqué\ : si ce fichier est trouvé dans les répertoires
\fBALL_PATCH_DIR/{apply,unpatch}/\fP, alors le fichier
\fBALL_PATCH_DIR/apply/<nom_patch>\fP sera appliqué pendant la phase de
configuration (on présume que cela appliquera le patch). De la même façon,
le fichier \fBALL_PATCH_DIR/unpatch/<nom_patch>\fP sera exécuté pendant
la phase «\ clean\ ». Par défaut, tous les patches sont appliqués en lançant
tous les exécutables contenus dans \fBALL_PATCH_DIR/apply/\fP si la demande en
est faite (que ce soit par l'option de configuration \fBpatch_the_kernel\fP ou
par la mise à YES de la variable d'environnement \fBPATCH_THE_KERNEL\fP. Notez
bien que les patches sont DÉSINSTALLÉS des sources quand vous lancez la
cible «\ clean\ ». Ce nettoyage peut être désactivé par la définition de la
variable d'environnement \fBNO_UNPATCH_BY_DEFAULT\fP.
.IP
Dans ce qui précède, \fBALL_PATCH_DIR\fP pointe par défaut vers un
sous\-répertoire de \fI/usr/src/kernel\-patches/\fP.
.IP
Parfois, il serait pratique de voir les patches s'appliquer quand quelqu'un
demande un patch spécifique grâce à cette option, sans être obligé de
définir explicitement la variable d'environnement. Mais puisque régler la
variable d'environnement \fBPATCH_THE_KERNEL\fP à «\ YES\ » peut être dangereux
(dans le sens où tous les patches seraient installés quand vous n'en vouliez
aucun, puisque vous n'avez pas spécifié l'option added_patches), vous pouvez
régler la variable PATCH_THE_KERNEL à \fIAUTO\fP, et dans ce cas,
PATCH_THE_KERNEL sera réglé à «\ YES\ » quand vous demanderez
\fB\-\-added\-patches truc\fP, et pas dans le cas inverse. De plus, notez que si
un quelconque patch installe un script dans le répertoire
\&\fI./debian/image.d/\fP, \fBrun\-parts\fP sera lancé sur ce répertoire juste avant
la construction du paquet de l'image du noyau. L'emplacement de la racine du
paquet en cours de construction sera défini dans la variable d'environnement
\fBIMAGE_TOP\fP, et la version du noyau sera transmise par la variable
d'environnement \fBversion\fP. C'est un des systèmes utilisés par le patch pour
insérer, par exemple, des fichiers supplémentaires dans l'image.
.IP
Certains des paquets de patches sont attentifs à d'autres variables
d'environnement, décrites dans le répertoire de documentation correspondant
(vous devriez par exemple consulter
\fI/usr/share/doc/kernel\-patch\-truc/README\-kernelpatch.Debian\fP pour obtenir
des informations complémentaires sur le patch truc).
.TP 
\fB\-\-arch\ truc\fP
Pratique pour définir l'architecture quand vous utilisez la compilation
croisée. Si vous ne faites pas de compilation croisée, l'architecture est
automatiquement déterminée. Le même résultat peut être obtenu en réglant la
variable d'environnement \fBKPKG_ARCH\fP. Cette valeur doit correspondre au
contenu de \fBDEB_HOST_ARCH_CPU\fP lorsque \fIdpkg\-architecture\fP est exécuté sur
la machine cible, et elle peut correspondre à une autre architecture dans le
cas d'un ensemble multiarchitecture (comme i386/amd64).
.TP 
\fB\-\-cross\-compile\ truc\fP
.TP 
\fB\-\-cross_compile\ truc\fP
Pratique pour définir la cible quand vous faites de la compilation
croisée. Utilisez la cible fantôme «\ \-\ » si vous construisez pour les
autres architectures dans le cas d'un ensemble multiarchitecture, comme
i386/amd64. Le même résultat peut être obtenu en définissant la variable
d'environnement. Notez bien que cela ne régle en aucune manière le
compilateur que le processus de construction du noyau doit utiliser. Si le
compilateur par défaut utilisé par le processus de construction n'est pas
celui dont vous avez besoin, définissez explicitement le compilateur qui
doit être utilisé. \fBCROSS_COMPILE\fP.
.TP 
\fB\-\-subarch\ truc\fP
Certaines architectures (comme Alpha, ou m68k) ont besoin de noyaux
différents pour chacune des sous\-architectures. Cette option offre un moyen
de le spécifier en tant qu'argument de \fBmake\-kpkg\fP. \fBNotez bien\fP qu'une
gestion de ces sous\-architectures doit être présente dans les sources du
noyaux afin que cette option serve à quelque chose. On peut obtenir le même
résultat en réglant la variable d'environnement \fBKPKG_SUBARCH\fP.
.TP 
\fB\-\-arch\-in\-name\fP
.TP 
\fB\-\-arch_in_name\fP
Cette option rallonge le nom du paquet de l'image du noyau en intégrant la
sous\-architecture dans le nom de l'image\ ; ainsi des scripts peuvent être
écrits pour créer de multiples sous\-architectures, l'une après l'autre. La
même chose peut être faite en réglant la variable d'environnement
\fBARCH_IN_NAME\fP. \fBNotez bien\fP que seul le \fInom\fP du paquet est changé, pas
l'emplacement des modules, etc.
.TP 
\fB\-\-pgpsign\fP nom
Définit la chaîne utilisée pour signer le fichier des \fBmodifications\fP
(changes) pour les modules externes rangés dans \fI/usr/src/modules/\fP et qui
utilisent PGP. Cette option prendra le pas sur le comportement par défaut et
sur les préférences générales qui se trouvent dans le fichier
\fI/etc/kernel\-pkg.conf\fP ou \fI~/.kernel\-pkg.conf\fP.
.TP 
\fB\-\-config\fP cible
Modifie le type de configuration utilisé, par défaut \f(CWoldconfig\fP. \fICible\fP
doit prendre l'une des valeurs suivantes\ : \f(CWoldconfig\fP, \f(CWconfig\fP,
\f(CWmenuconfig\fP, \f(CWgconfig\fP, \f(CWxconfig\fP, \f(CWrandconfig\fP, \f(CWdefconfig\fP,
\f(CWallmodconfig\fP, \f(CWallyesconfig\fP, \f(CWallnoconfig\fP, \f(CWold\fP, \f(CWmenu\fP,
\f(CWg\fP, ou \f(CWx\fP.
.sp
Cette option est particulièrement utile lors de l'utilisation de
\s-1PATCH_THE_KERNEL\s0 lorsque certains patches modifient les options de
configuration offertes. \fBNotez\fP cependant que \fBmake\-kpkg\fP explore au
démarrage le fichier de configuration à la recherche de certaines options,
notamment l'activation ou non des modules, et que la modification de ce
choix plus tard dans la configuration engendrera une erreur. Si nécessaire,
créez un fichier de configuration le plus proche possible de celui désiré
avant d'appeler make\-kpkg avec cette option.
.TP 
\fB\-\-targets\fP
Affiche la liste des cibles connues. Voir la section \fBCibles\fP plus loin.
.TP 
\fB\-\-noexec\fP
Passe l'option \fB\-n\fP au processus \fImake\fP afin que les commandes soient
simplement affichées à l'écran mais pas réellement exécutées. C'est très
pratique pour le débogage.
.TP 
\fB\-\-verbose\fP
Appelle \fImake\fP avec l'option \-V=1, ce qui appelle les commandes Make du
niveau supérieur, pratique pour voir ce qui est en train de se passer.
.TP  
\fB\-\-initrd\fP
Si \fBmake\-kpkg\fP génère un paquet \fIkernel\-image\fP, déclenche toutes les
actions nécessaires lors du chargement d'un noyau utilisant
\fBinitrd\fP. \fBNOTE\fP\ : Sur d'anciens noyaux, cela nécessite un patch non
standard des sources du noyau pour initrd et cramfs (à moins que la
configuration de mkinitrd n'ait été modifiée afin de ne pas utiliser
cramfs), sans lequel vous risquez d'obtenir un noyau non amorçable. Ce patch
est généralement présent dans les sources du noyau fournies par
Debian. Certaines architectures ont toujours besoin de patches pour corriger
les problèmes cramfs. Cette option peut entraîner des dépendances
additionnelles, et des modifications des scripts du responsable. Elle n'a
pas d'effet quand \fBmake\-kpkg ne génère pas\fP de paquet \fIkernel\-image\fP. Le
même résultat peut être obtenu en donnant à la variable d'environnement
\fBINITRD\fP une valeur non vide.
.TP 
\fB\-\-zimage\fP
Génère un noyau en zImage plutôt qu'en bzImage (comportement par
défaut). C'est utile pour ceux qui ont des problèmes avec les noyaux
bzImage.
.TP 
\fB\-\-bzimage\fP
Génère un noyau en bzImage. C'est utile pour ceux qui veulent un noyau
bzImage sur les systèmes où le réglage par défaut est zImage.
.TP 
\fB\-\-mkimage\fP
La valeur sera une commande pour créer une image initrd, un répertoire
étant donné. Elle est passée à l'option \fI\-m\fP du programme \fImkinitrd\fP.
Par exemple,
  "genromfs \-d %s \-f %s"
ou
   "mkcramfs %s %s"
.TP 
\fB\-\-rootcmd commande\fP
La commande qui offre la possibilité d'obtenir l'accès superutilisateur (par
exemple, «\ sudo\ » ou «\ fakeroot\ »). Cet accès est nécessaire pour
l'option \-r de dpkg\-buildpackage.
.TP 
\fB\-\-stem truc\fP
Nomme le paquet truc\-* à la place de kernel\-*. Pratique pour assurer la
transition du nommage des paquets de kernel\-* à linux\-*, afin de préparer
les noyaux non\-Linux de la distribution. La valeur par défaut est linux.
.TP 
\fB\-\-us\fP
Cette option est transmise à dpkg\-buildpackage et demande de ne pas signer
la source. Elle n'a de sens que pour la cible buildpackage.
.TP 
\fB\-\-uc\fP
Cette option est transmise à dpkg\-buildpackage, et demande de ne pas signer
le changelog. Elle n'a de sens que pour la cible buildpackage.
.PP
Les options peuvent être raccourcies en la plus petite chaîne de caractères
non équivoque et peuvent être invoquées indifféremment avec les préfixes \-
ou \-\-. Vous pouvez mettre un espace ou un symbole = entre une option et sa
valeur. Vous pouvez aussi utiliser la forme option=valeur. Pour plus
d'informations sur ces variantes et d'autres qui sont reconnues, consultez
la page de manuel Getopt::Long(3perl).
.TP 
\fBCONCURRENCY_LEVEL\fP
Si elle est définie, cette variable d'environnement régle le niveau de
profondeur (NdT\ : concurrency) utilisé par make pour compiler le noyau
et l'ensemble des modules. Elle utilise le drapeau \fI\-j\fP dans le make qui
est dans la cible \fBbuild\fP de \fBmake\-kpkg\fP.
Elle doit être un (petit) entier, si vous la définissez. Vous pouvez
obtenir le nombre actuel de CPU grâce à la commande\ :
 "grep \-c '^processor' /proc/cpuinfo"
\fBATTENTION\ :\fP
NE définissez PAS l'option dans MAKEFLAGS directement, cela entraînerait
l'échec de la construction.
.SH CIBLES
.TP 
\fBclean\fP
Efface tous les fichiers créés dans le répertoire des sources du noyau par
la cible \fBbuild\fP, et lance un make distclean. (Consultez le Makefile du
noyau Linux pour plus d'informations.) Notez que malgré l'attention portée
aux réglages du noyau courant contenus dans le fichier \fI.config\fP, le
fichier \fIinclude/linux/autoconf.h\fP ne sera pas gardé. Cette cible ne doit
pas être combinée avec une autre, puisque \fBmake\-kpkg\fP lit toutes les
données \fIavant\fP de lancer une quelconque cible, donc les autres cibles
seront exécutées avec les anciennes données, ce qui n'est sûrement pas ce
que vous désirez.
.TP 
\fBbuildpackage\fP
Cette cible lance les cibles \fBclean\fP et \fBbinary\fP, et génère le paquet
complet grâce à \fBdpkg\-buildpackage\fP.
.TP 
\fBbinary\fP
Cette cible génère les quatre paquets Debian en lançant les cibles
\fBbinary\-indep\fP et \fBbinary\-arch\fP.
.TP 
\fBbinary\-indep\fP
Cette cible génère les paquets indépendants de l'architecture en lançant les
cibles \fBkernel_source\fP, \fBkernel_manual\fP et \fBkernel_doc\fP.
.TP 
\fBbinary\-arch\fP
Cette cible génère les paquets dépendants de l'architecture en lançant les
cibles \fBkernel_headers\fP et \fBkernel_image\fP.
.TP 
\fBkernel_source\fP
Cette cible génère un paquet Debian des sources du noyau Linux. Si la
variable d'environnement \fBSOURCE_CLEAN_HOOK\fP pointe sur un exécutable,
alors cet exécutable sera lancé, juste avant de faire le paquet, sur le
répertoire (racine) temporaire des sources du noyau,
\&\fI./debian/tmp\-source/usr/src/kernel\-source\-X.X.XX\fP, de façon à ce que toute
commande appropriée puisse être lancée (supprimer des arborescences liées à
des architectures, ôter les répertoires de contrôle de version, \fIfind
\&. \-type d \-name CVS \-prune \-exec rm \-rf {} \;\fP etc). Cela ne concerne que
les sources du noyau qui sont en cours d'empaquetage. Si cette action porte
sur le répertoire courant et ses répertoires fils, l'arborescence originale
qui contient les sources reste, elle, inchangée. Les variables
d'environnement \fBHEADER_CLEAN_HOOK\fP et \fBDOC_CLEAN_HOOK\fP sont
semblables. Elles doivent pointer sur des exécutables\ ; ces exécutables
seront appliqués sur le répertoire (racine) temporaire des en\-têtes du noyau
et de la documentation juste avant la génération des paquets respectifs, de
façon à ce que vous puissiez lancer toute action qui vous semble
adéquate. De même, ne sont touchées que les sources qui sont en cours
d'empaquetage.
.TP 
\fBkernel_headers\fP
Cette cible génère le paquet Debian des fichiers d'en\-têtes contenus dans le
noyau Linux.
.TP 
\fBkernel_manual\fP
Cette cible génère le paquet Debian contenant les pages de manuel de la
section\ 9 fournies dans le noyau Linux. Notez bien que ce n'est pas
vraiment une cible indépendante, puisque son appel déclenchera l'appel de la
cible \fIkernel_doc\fP, et créera un paquet kernel\-doc en même temps.
.TP 
\fBkernel_doc\fP
Cette cible génère un paquet Debian contenant la documentation contenue dans
le noyau Linux. Elle peut être appelée indépendamment de la cible
\fIkernel_manual\fP, mais l'inverse n'est pas possible.
.TP 
\fBkernel_image\fP
Cette cible génère un paquet Debian contenant un noyau Linux, et tous les
modules définis dans le fichier de configuration du noyau \fI.config\fP. S'il
n'y a pas de fichier \fI.config\fP dans les répertoires des sources du noyau,
une configuration par défaut est utilisée, identique à celle utilisée pour
créer les disquettes de démarrage \fBDebian\fP.
.IP
Si le fichier \fI./debian/post\-install\fP existe, et qu'il s'agit d'un
exécutable, il est lancé juste avant la création du paquet de l'image du
noyau. De même, notez que si des scripts existent dans le répertoire
\&\fI./debian/image.d/\fP , \fBrun\-parts\fP sera lancé sur ce répertoire juste avant
la création du paquet de l'image du noyau. L'emplacement de la racine de
l'image pour le paquet en cours de construction peut être défini par la
variable d'environnement \fBIMAGE_TOP\fP, et la version du noyau est définie
grâce à la variable d'environnement \fBversion\fP pour tous ces scripts.
.IP
Lors de l'installation initiale, le paquet image met à jour le lien
symbolique contenu dans le répertoire destination (la racine, par défaut)
afin qu'il pointe sur la nouvelle image du noyau dans le répertoire des
images, qui est \fI/boot\fP. Si le lien symbolique pointe déjà sur l'image du
noyau à jour, rien ne se passe. Si le lien pointe sur une version
précédente, il y a permutation avec le suffixe .old, et un nouveau lien
symbolique, correctement mis à jour, prend sa place (la variable
minimal_swap dans \fI/etc/kernel\-img.conf\fP modifie ce comportement). Rien
n'est fait lors de mises à jour.
.IP
Consultez la documentation à propos des variables de type «\ hook\ » (points
d'entrée) dans \fIkernel\-img.conf(5)\fP. Ces variables peuvent indiquer des
scripts qui ajoutent ou suppriment une ligne dans le menu du grub à
l'installation ou à la suppression de l'image du noyau. Un exemple de script
pour ajouter des lignes au menu du grub est fourni dans le répertoire
\fI/usr/share/doc/kernel\-package/\fP.
.IP
En dehors de ces variables de type «\ hook\ » que l'administrateur peut
définir, il existe un ensemble de répertoires dans lesquels des paquets, ou
l'administrateur, peuvent déposer des scripts. Ces répertoires sont
\fI/etc/kernel/preinst.d/\fP, \fI/etc/kernel/postinst.d/\fP,
\fI/etc/kernel/prerm.d/\fP, \fI/etc/kernel/postrm.d/\fP, et
\fI/etc/kernel/preinst.d/<VERSION>/\fP,
\fI/etc/kernel/postinst.d/<VERSION>/\fP,
\fI/etc/kernel/prerm.d/<VERSION>/\fP,
\fI/etc/kernel/postrm.d/<VERSION>/\fP. Si ces répertoires existent, le
paquet kernel\-image lancera le programme \fBrun\-parts\fP sur ceux\-ci, en
passant en argument la version en cours d'installation ou de suppression,
durant la phase correspondante (installation ou suppression). Avant
d'appeler ces scripts, la variable d'environnement \fBSTEM\fP peut être réglée
avec le contenu de l'argument \fI\-\-stem\fP (ou à sa valeur par défaut,
linux). Ces scripts peuvent être appelés avec deux arguments, le premier
étant la \fIversion\fP de l'image du noyau, et le second étant \fIl'endroit\fP où
est rangé l'image proprement dite. Puisque debconf est lancé avant que le
script ne soit appelé, ce dernier ne devra pas générer de message de
diagnostic sur la sortie standard \-\- En effet, au moment où la
post\-installation appelle \fBdb_stop\fP, debconf ne rétablit pas la sortie
standard, tous les messages en sa direction disparaissent.
.IP
À l'installation, vous aurez la possibilité de lancer le chargeur de
démarrage \fILILO\fP (ou des équivalents tels que \fIloadlin, SILO, QUIK,
VMELILO, ZIPL, yaboot, PALO\fP ou \fIGRUB\fP), en créant un fichier de
configuration pour ces programmes de démarrage, si nécessaire. À ce moment,
vous aurez aussi la possibilité de mettre ce nouveau noyau sur une
disquette, en formatant la disquette si nécessaire. En cas de suppression,
le paquet vérifie la version du noyau en cours d'exécution, et refuse alors
d'effacer le noyau en cours d'utilisation. \fIGrub\fP mérite une mention
particulière ici, puisque grub n'a pas besoin d'être relancé après
l'installation d'une image de noyau, et qu'une modification automatisée du
contenu du menu est suffisante pour l'installation ou la suppression d'une
image d'un noyau.
.TP 
\fBbuild\fP
Cette cible, utilisée par la cible \fBkernel_image\fP ci\-dessus, compile le
noyau Linux.
.TP 
\fBmodules\fP
Cette cible vous permet de générer tous les modules et paquets additionnels
qui dépendent fortement de la version du noyau pour laquelle ils ont été
compilés, en même temps que vous construisez votre image du noyau. Cette
cible s'attend à trouver les modules et paquets sous /usr/src/modules, et,
pour chacun de ces répertoires, se déplacera dans MODULE_LOC/x (MODULE_LOC
étant par défaut \fI/usr/src/modules\fP), et lancera la règle \fBkdist\fP du
fichier \fIdebian.rules\fP qui s'y trouve. Cette cible créera le(s) paquet(s)
\fBDebian\fP de(s) module(s), ainsi qu'un fichier tar compressé et un fichier
diff compressé, les \fImd5sums\fP correspondants, générés par
\fBdpkg\-genchanges\fP, seront enregistrés dans un fichier des modifications
(changes). Ce fichier sera signé avec la même identité que celle utilisée
pour signer le paquet du noyau. Cette option est utilisée par les
responsables qui déploient les paquets dans les archives de Debian.
.TP 
\fBmodules_config\fP
Cette cible permet de configurer tous les paquets de \fBMODULE_LOC\fP qui
pointent par défaut sur \fB/usr/src/modules\fP. À utiliser si vous avez besoin
de modifier manuellement certains points de la configuration, ou si vous
voulez compiler manuellement tous les modules additionnels. À n'utiliser que
si vous disposez déjà d'un répertoire ./debian.
.TP 
\fBmodules_image\fP
Cette cible vous permet de construire tous les paquets de \fBMODULE_LOC\fP qui
pointent par défaut sur \fB/usr/src/modules\fP, mais elle ne crée pas les
fichiers sources ou diffs, ni ne crée ni ne signe un fichier des
modifications (un fichier «\ changes\ »). C'est la seule option liée aux
modules dont vous aurez besoin si vous voulez juste compiler les modules
additionnels pour leur installation sur une ou plusieurs machines. Elle est
utilisée en général en conjonction avec \fBkernel_image\fP, notamment si vous
invoquez aussi l'option \fBappend_to_version\fP (afin d'éviter de faux messages
d'avertissement). À n'utiliser que si vous disposez déjà d'un répertoire
\&./debian.
.TP 
\fBmodules_clean\fP
Cette cible vous permet de nettoyer tous les paquets de \fBMODULE_LOC\fP qui
pointent par défaut sur \fB/usr/src/modules\fP, ce qui devrait être suffisant
pour défaire tout ce qu'ont pu faire toutes les autres cibles
modules_truc. À n'utiliser que si vous disposez déjà d'un répertoire
\&./debian.
.TP 
\fBconfigure\fP
Cette cible lance configure (en fait \fBconfig_target\fP, défini par
\fB\-\-config\fP qui pointe par défaut sur \fIoldconfig\fP) assez tôt, de sorte que
vous puissiez éditer les fichiers créés par \fBmake config\fP dans le
répertoire des sources du noyau, sans que \fBmake\-kpkg\fP ne les écrase
ensuite.
.TP 
\fBdebian\fP
Cette cible crée le répertoire \fI./debian\fP et patche éventuellement le
source. Cette cible est appelée par la cible \fBconfigure\fP. Vous utiliserez
cette cible pour patcher les sources, puis vous lancerez l'étape de
configuration manuellement.
.TP 
\fBlibc\-kheaders\fP
C'est une cible spéciale pour les responsables de libc\-dev, qui peuvent s'en
servir pour créer les paquets d'en\-têtes dont la libc a besoin. Notez qu'il
est dangereux de créer un paquet de libc\-kheaders différent des en\-têtes
avec lesquels la libc a été compilée. C'est une cause \fBconnue\fP d'arrêts
brutaux du système. Consultez \fI/usr/share/kernel\-package/README.headers\fP
pour plus d'informations. Créer et installer votre propre paquet
libc\-kheaders peut endommager votre système, à moins que vous ne soyez sûr
de ce vous faites. Vous êtes prévenus.
.SH "VARIABLES D'ENVIRONNEMENT"
\fIKPKG_DEBUG\fP, s'il est défini, demande à make\-kpkg de sortir des messages
de débogage concernant des fonctions du shell exécutées en interne. Cela
n'intéressera probablement personne, à part ceux qui déboguent
\fBmake\-kpkg\fP. Les variables suivantes (décrites plus haut) affectent
\fBmake\-kpkg\fP\ : \fIDEBIAN_REVISION_MANDATORY\fP \fIAPPEND_TO_VERSION\fP
\fIVERSION_H_OK\fP \fIPATCH_THE_KERNEL\fP \fINO_UNPATCH_BY_DEFAULT\fP \fIKPKG_ARCH\fP
\fICROSS_COMPILE\fP \fIKPKG_SUBARCH\fP \fIARCH_IN_NAME\fP \fIINITRD\fP
\fISOURCE_CLEAN_HOOK\fP \fIMODULE_LOC\fP \fICONCURRENCY_LEVEL\fP
\fIIGNORE_UPPERCASE_VERSION\fP
.SH FICHIERS
Outre les options de lancement, le fichier \fIdebian.rules\fP lancé par
\fBmake\-kpkg\fP recherche également un fichier de configuration propre à
l'utilisateur \fI~/.kernel\-pkg.conf\fP. En cas d'absence de ce fichier, il
recherche un réglage par défaut pour tout le système dans le fichier
\fI/etc/kernel\-pkg.conf\fP. La configuration par défaut permet le remplacement
pour tout le système du nom complet et du courriel de la personne
responsable de la maintenance des paquets du noyau sur le site, mais les
fichiers \fI/etc/kernel\-pkg.conf\fP (ou \fI~/.kernel\-pkg.conf\fP) sont en fait des
bribes de Makefile, et toute directive valide peut y être incluse. \fBNote\fP\ : La prudence est de mise avec ce fichier, puisque vous pouvez changer
complètement le comportement du make en modifiant son contenu. Consultez le
fichier \fI/usr/share/doc/kernel\-package/Problems.gz\fP pour connaître la liste
des problèmes recensés lors de la compilation des images du noyau. Un
tutoriel exhaustif et une documentation sont aussi disponibles dans
\fI/usr/share/doc/kernel\-package/README.gz\fP et leurs lectures sont
recommandées avant l'utilisation de cet utilitaire.
.SH "VOIR AUSSI"
\fBkernel\-pkg.conf\fP(5), \fBkernel\-img.conf\fP(5), \fBmkinitrd\fP(8),
\fBGetopt::Long\fP(3perl), \fBdpkg\-deb\fP(1), \fBdpkg\-source\fP(1), \fBmake\fP(1), le
\fBmanuel des Programmeurs\fP, le \fBmanuel du make du GNU\fP et la documentation
complète du répertoire \fB/usr/share/doc/kernel\-package\fP.
.SH AUTEUR
Cette page a été écrite par Manoj Srivastava, <srivasta@debian.org>,
pour le système Debian GNU/Linux.
.SH TRADUCTION
Cette page de manuel a été traduite et est maintenue par Sylvain Cherrier
<sylvain.cherrier@free.fr> et les membres de la liste
<debian\-l10n\-french@lists.debian.org> entre 2004 et 2007.
