.\" Hey, Emacs! This is an -*- nroff -*- source file.
.\" Copyright (c) 1997 Manoj Srivastava <srivasta@debian.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" $Id: kernel-pkg.conf.5,v 1.10 1999/01/08 05:30:43 srivasta Exp $
.\"
.TH KERNEL\-PKG.CONF 5 "Jan  7 1997" "Debian" "Debian GNU/Linux manual" 
.\" NAME should be all caps, SECTION should be 1-8, maybe w/ subsection
.\" other parms are allowed: see man(7), man(1)
.SH NAME
kernel\-pkg.conf \- site wide configuration file for make\-kpkg
.SH SYNOPSIS
.I /etc/kernel\-pkg.conf
.SH "DESCRIPTION"
The file 
.I /etc/kernel\-pkg.conf
is actually a 
.BR Makefile
snippet included during the kernel packages build process, and hence
you may put any legal Makefile directive in that file (just make very
sure you know what you are doing).  
.PP
All the variables have reasonable default values, and maybe
over\-ridden on a per run or a per individual basis by using
environment variables.  Some of the variables can further be
over\-ridden by options to 
.B make\-kpkg.
.PP
At the moment, the user modifiable variables supported are:
.TP
.B maintainer:     
Local kernel-* package maintainer. Set up at package installation by
the 
.IR postinst.
Can be over\-ridden by the environment variable 
.B KPKG_MAINTAINER.
.TP
.B email:          
The email address of that person.  Set up at package installation by
the 
.IR postinst.
Can be over\-ridden by the environment variable 
.B KPKG_EMAIL.
.TP
.B pgp:            
Name to search for in the pgp database 
.BI iff
separate modules (like pcmcia etc) are being built in
.IR /usr/src/modules/.
Can be over\-ridden by the environment variable 
.B PGP_SIGNATURE, 
and is over\-ridden (again) by the 
.IR \-\-pgpsign
option of
.B make-kpkg.
Defaults to 
.I maintainer.
(Optional)
.TP
.B debian:         
The Debian revision of the kernel packages. Can be over\-ridden
by the environment variable 
.B DEBIAN_REVISION, 
and is over\-ridden (again) by the 
.IR \-\-revision
option of
.B make-kpkg.
Defaults to 
.I 1.00.
(Optional)
.TP
.B image_in_boot:  
Set to True if you want the kernel image 
.I vmlinuz 
in 
.I /boot 
rather than the default 
.I /.  
Can be over\-ridden by the environment variable
.B IMAGE_IN_BOOT. 
defaults to undefined.
(Optional)
.TP
.B kimage:         
The kernel image type (i.e. zImage or bzImage). Can be
over\-ridden from the environment variable 
.B IMAGE_TYPE,  
and is over\-ridden (again) by the options
.IR \-\-zimage
or
.IR \-\-bzimage
of
.B make-kpkg.
Defaults to 
.I bzImage.
(Optional)
.TP
.B no_symlink
Whether to use symlinks to the 
.I image
file. Can be over\-ridden by the environment variable
.B NO_SYMLINK
Mutualy exclusive to 
.I reverse_symlink. 
Can be used with
.I image_in_boot. 
The image is placed in vmlinuz (instead of /boot/vmlinuz-X.X.XX). The
old vmlinuz is moved to vmlinuz.old unconditionally. (Normally, that
is only done if the version of the new image differes from the old
one). This restricts you to two images, unless you take additional
action and save copies of older images. This is for people who have
boot on a system that does not use symbolic links (and say, they use
loadlin as a boot loader). This is a Hack.
Defaults to  undefined (optional)
.TP
.B reverse_symlink
Whether to use reverse symlinks (that is, the real file is the one
without the version number, and the numberd version is the link) to the 
.I image
file. Can be over\-ridden by the environment variable
.B REVERSE_SYMLINK
Mutualy exclusive to 
.I no_symlink.
Can be used with
.I image_in_boot.
Just like 
.I no_symlink, 
except that the
/boot/vmlinuz-X.XX is sym linked to the real new
image, vmlinuz. This too restricts you to just two
images unless futher action is taken. The older
symlinks are left dangling. This is for people with
boot on umsdos, and who can't see the link in dos, but
do want to know the image version when in Linux. 
This is a Hack.
Defaults to  undefined (optional)
.TP
.B patch_the_kernel
This is an experts only variable. If set to YES (ENV
variable 
.B PATCH_THE_KERNEL 
overrides this), the build
process causes run-parts to be run over
.I /usr/src/kernel-patches/$(architecture)/apply 
and (hopefully) reverses the process during clean by
running run-parts over
.I /usr/src/kernel-patches/$(architecture)/unpatch. 
This
is still evolving.
.TP
.B root_cmd 
This should be set to a means of gaining super user  access (for
example, 
.I `sudo'
or 
.I`fakeroot')
as needed by 
.B dpkg-buildpackages's 
-r option. Ths is only relevant for the buildpackage taregt, when it
is used to call dpkg-buildpackage with the proper options. The
environment variable 
.B ROOT_CMD
over-rides this.
.TP
.B do_clean	
Set to anything but YES, this shall forego the make clean done in the
kernel source tree after building the kernel image package. The
environment variable 
.B CLEAN_SOURCE
over-rides this.
.TP
.B make_libc_headers
This is meant to be used by the 
.I libc6 
maintianer, when he compiles
.I libc6, 
to also package up the corresponding headers. 
.B DO NOT SET THIS
unless you know what you are doing, since a mismatch between the
headers you package and 
.I libc6 
may well 
create a subtle instablity in all code compiled on your machine. You
have been warned. The environment variable 
.B MAKE_LIBC_HEADERS
over-rides this.
.TP
.B CONFDIR
This variable should be set to a directory which contains architecture
specific 
.I .config
files (look at
.I /usr/lib/kernel-package/Config
for examples). This is useful for people who need to compile for
several architectures. Defaults to 
.I /usr/lib/kernel-package/Config
.TP
.B IMAGE_DESTDIR
If you want the image to be stored in elsewhere than
.I /boot
set this variable to the dir where you want the image. This may be of
help to
.B loadlin
users.Defaults to 
.I /boot.
.TP
.B MODULE_LOC
Set this variable, either in the envoronment or in the config file, to
point to the location where the add-on modules are located. Defaults
to 
.I /usr/src/modules
.TP
.B CONFDIR
Set this variable, either in the envoronment or in the config file, to
point to the location where the kernel config files are
located. Defaults to 
.I /usr/lib/kernel-package/Config
.TP
.B PATCH_DIR 
Set this variable, either in the envoronment or in the config file, to
point to the location where the add-on kernel patches are
located. Defaults to
.I /usr/src/kernel-patches/ARCHITEXTURE
.PP
The value of a variable can be set so:
.IP a)
Defaults exist in the rules file. These are the values used if no
customization is done.
.IP b)
Variables can be set in the config file 
.I /etc/kernel-pkg.conf. 
These values over ride the defaults.
.IP c)
Variables can also be set by setting a corresponding envirnment
variable.  These values over ride the config file and the defaults.
.IP d)
Using 
.B make-kpkg 
options, or, if using the rules file directly, on 
command line 
.br
.BI "# xxx/rules DEBIAN_REVISION=2.0a kernel_image"
.br
This over rides all the above methods.
.SH FILES
The file described here is
.I /etc/kernel-pkg.conf.
.SH "SEE ALSO"
.BR make-kpkg (8),
.BR make (1),
.B The GNU Make manual.
.SH BUGS
There are no bugs.  Any resemblance thereof is delirium. Really.
.SH AUTHOR
This manual page was written by Manoj Srivastava <srivasta@debian.org>,
for the Debian GNU/Linux system.
