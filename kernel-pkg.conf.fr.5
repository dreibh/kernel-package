.\" Hey, Emacs! This is an -*- nroff -*- source file.
.\" Copyright (c) 1997 Manoj Srivastava <srivasta@debian.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" $Id: kernel-pkg.conf.5,v 1.37 2003/09/01 17:09:15 srivasta Exp $
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH KERNEL\-PKG.CONF 5 "7 janvier 1997" Debian "Manuel Debian GNU/Linux"
.\" NAME should be all caps, SECTION should be 1-8, maybe w/ subsection
.\" other parms are allowed: see man(7), man(1)
.SH NOM
kernel\-pkg.conf \- fichier de configuration général pour make\-kpkg
.SH SYNOPSIS
\fI/etc/kernel\-pkg.conf\fP ou \fI~/.kernel\-pkg.conf\fP
.SH DESCRIPTION
Les fichiers \fI/etc/kernel\-pkg.conf\fP ou \fI~/.kernel\-pkg.conf\fP sont en fait
des morceaux de code de type \fBMakefile\fP inclus dans le processus de
construction du paquet du noyau. Vous pourrez inclure de la sorte n'importe
quelle directive de Makefile dans ce fichier (vérifiez simplement que vous
savez vraiment ce que vous faites). S'il existe un fichier de configuration
\fI~/.kernel\-pkg.conf\fP, il sera prioritaire sur le fichier de configuration
du système \fI/etc/kernel\-pkg.conf\fP.
.PP
Toutes les variables ont des valeurs raisonnables par défaut, et peuvent
être outrepassées ponctuellement ou sur la base de choix de l'utilisateur
grâce aux variables d'environnement. Certaines de ces variables peuvent de
plus être modifiées grâce à des options de \fBmake\-kpkg\fP.
.PP
Les variables actuellement modifiables par l'utilisateur sont les suivantes\ :
.TP 
\fBmaintainer\fP
Mainteneur local des paquets kernel\-*. Défini lors de l'installation du
paquet par le script de \fIpost\-installation\fP. Il est possible de
l'outrepasser grâce à la variable d'environnement
\fBKPKG_MAINTAINER\fP. Veuillez noter que tout signe de type «\ '\ » doit être
protégé, comme dans maintainer = John O'\e\*(rqBrien. Oui, ce n'est pas
terrible, mais ça marche.
.TP 
\fBemail\fP
L'adresse de courriel de cette personne. Définie lors de l'installation du
paquet par le script de \fIpost\-installation\fP. Il est possible de
l'outrepasser grâce à la variable d'environnement \fBKPKG_EMAIL\fP.
.TP 
\fBpgp\fP
Nom à rechercher dans la base de données pgp \fBsi\fP des modules séparés (tels
que pcmcia, etc.) ont été compilés dans \fI/usr/src/modules/\fP. Il est
possible de l'outrepasser grâce à la variable d'environnement
\fBPGP_SIGNATURE\fP, et il peut être (à nouveau) outrepassé par l'option
\fI\-\-pgpsign\fP de \fBmake\-kpkg\fP. Valeur par défaut\ :
\fImaintainer\fP. (Optionnel)
.TP 
\fBdebian\fP
Version des paquets du noyau, incluant aussi les versions officielles
(upstream). Réglée à «\ YES\ », elle entraîne l'exécution d'un clean pour la
version et la révision Debian. Modifiable par la variable d?environnement
\fBDEBIAN_REVISION\fP, puis (encore) modifiable par l?option \fI\-\-revision\fP de
\fBmake\-kpkg\fP. Réglée par défaut à
\fI<VERSION>\-10.0.0.Custom\fP. (Optionnel)
.TP 
\fBdebian_revision_mandatory\fP
Habituellement non définie. Si elle, ou la variable d'environnement
\fBDEBIAN_REVISION_MANDATORY\fP, sont définies, alors l'absence de numéro de
révision Debian entraînera une erreur (et \fBmake\-kpkg\fP ne fournira pas la
valeur par défaut «\ 10.0.0.Custom\ »).
.TP 
\fBlink_in_boot\fP
Mettre à «\ True\ » si vous voulez que le lien symbolique pointant vers
l'image du noyau, à savoir \fIvmlinuz\fP, soit dans \fI/boot\fP plutôt que dans
\fI/\fP. Il est possible de l'outrepasser avec la variable d'environnement
\fBLINK_IN_BOOT\fP. Non renseigné par défaut. (Optionnel)
.TP 
\fBkimage\fP
Type d'image du noyau (zImage ou bzImage par exemple). Il est possible de
l'outrepasser grâce à la variable d'environnement \fBIMAGE_TYPE\fP, et il est
possible de l'outrepasser (de nouveau) grâce aux options \fI\-\-zimage\fP ou
\fI\-\-bzimage\fP de \fBmake\-kpkg\fP. Valeur par défaut\ : \fIbzImage\fP. (Optionnel)
.TP 
\fBno_symlinks\fP
Définit s'il faut utiliser des liens symboliques avec le fichier
\fIimage\fP. Il est possible de l'outrepasser grâce à la variable
d'environnement \fBNO_SYMLINK\fP et est l'opposée de \fIreverse_symlinks\fP. Elle
peut être utilisée avec \fIlink_in_boot\fP.L'image réelle est mise dans
vmlinuz, au lieu de /boot/vmlinuz\-X.X.XX. L'ancien vmlinuz est renommé
d'office en vmlinuz.old. (Normalement, cela n'est fait que si la version de
la nouvelle image est différente de l'ancienne). Vous ne pouvez avoir que
deux images, à moins de prendre des mesures pour conserver des copies des
anciennes images. Cela peut servir à ceux qui ont \fI/boot\fP sur un système
qui n'utilise pas les liens symboliques\ ; ils utilisent aussi loadlin comme
programme de démarrage. C'est un bidouillage. La valeur par défaut est «\ No\ ».
.TP 
\fBreverse_symlinks\fP
Définit s'il faut utiliser des liens symboliques inversés avec le fichier
\fIimage\fP (c'est\-à\-dire que le fichier réel est celui qui n'a pas de numéro
de version et c'est le lien qui possède le numéro de version). Il est
possible de l'outrepasser grâce à la variable d'environnement
\fBREVERSE_SYMLINK\fP et est l'opposée de \fIno_symlinks\fP. Elle peut être
utilisée avec \fIlink_in_boot\fP. Tout se passe comme avec \fIno_symlinks\fP, sauf
que /boot/vmlinuz\-X.X.XX est un lien symbolique vers la nouvelle image
réelle, vmlinuz. Là aussi, vous ne pouvez avoir que deux images, à moins de
prendre d'autres mesures. Les liens symboliques plus anciens sont laissés
ballants. Cela peut servir aux gens qui ont \fI/boot\fP sur umsdos et qui ne
peuvent voir les liens symboliques dans dos mais veulent connaître la
version de l'image quand ils sont dans Linux. C'est un bidouillage. La
valeur par défaut est «\ No\ ».
.TP 
\fBpatch_the_kernel\fP
Variable réservée seulement aux experts. Si elle est réglée à «\ YES\ » (la
variable d'environnement \fBPATCH_THE_KERNEL\fP l'outrepasse), le processus de
construction déclenche l'exécution de run\-parts sur
\fI/usr/src/kernel\-patches/$(architecture)/apply\fP et (si tout se passe bien)
lance l'opération inverse lors du nettoyage (NdT\ : clean) en exécutant
run\-parts sur
\fI/usr/src/kernel\-patches/$(architecture)/unpatch\fP. L'architecture spéciale
«\ all\ » sert aux patches indépendants de toute architecture.
.TP 
\fBconfig_target\fP
Choix du type de configuration à exécuter. Par défaut, c'est «\ oldconfig\ », ce qui est pratique pour les lancements non interactifs (ou aux
interactions réduites au minimum). Si vous avez défini patch_the_kernel à «\ YES\ » et que certains patches modifient les choix de configuration
disponibles, vous voudrez probablement un autre type (telle que menuconfig
ou xconfig). (La variable d'environnement \fBCONFIG_TARGET\fP outrepasse ce
choix). Si la valeur de config_target n'est ni config, oldconfig, menuconfig
ou xconfig, elle est alors réinitialisée à oldconfig.
.TP 
\fBuse_saved_config\fP
Variable réservée seulement aux experts. Si elle est réglée à «\ NO\ » (la
variable d'environnement \fBUSE_SAVED_CONFIG\fP outrepasse cela), le fichier
\&.config.save du répertoire au sommet de l'arborescence est ignoré.
.TP 
\fBroot_cmd\fP
C'est une variable dont le but est d'être transmise à \fBdpkg\-buildpackage\fP
dans la cible \fIbuildpackage\fP. Elle doit fournir un moyen d'obtenir les
droits d'accès du superutilisateur ( \fI«\ sudo\ »\fP ou \fI«\ fakeroot\ »\fP par
exemple), un peu à la façon de l'option \-r de \fBdpkg\-buildpackage\fP. La
variable d'environnement \fBROOT_CMD\fP a priorité sur celle\-ci. La variable
d'environnement \fBUNSIGN_SOURCE\fP fournit à cette commande l'option qui force
dpkg\-buildpackage à ne pas signer la source, et de la même façon, la
variable d'environnement \fBUNSIGN_CHANGELOG\fP fournit à cette commande
l'option qui force dpkg\-buildpackage à ne pas signer le changelog. Là
encore, cette variable n'est utile que pour la cible \fIbuildpackage\fP. Réglez
la variable d'environnement ROOT_CMD si vous voulez juste construire l'image
du noyau, par exemple.
.TP 
\fBdelete_build_link\fP
Lorsque réglée à «\ YES\ », supprime le lien symbolique
\fI/lib/modules/$VERSION/build\fP pointant sur le paquet .deb. La variable
d'environnement \fBDELETE_BUILD_LINK\fP a priorité sur cette option.
.TP 
\fBdo_clean	\fP
Si elle est définie à «\ YES\ », un make clean sera lancé sur l'arborescence
des sources du noyau après la construction du paquet de l'image du noyau. La
variable d'environnement \fBCLEAN_SOURCE\fP a priorité sur cette option.
.TP 
\fBinstall_vmlinux\fP
Si elle est réglée à «\ YES\ », l'image non compressée du noyau au format
ELF sera installée en plus de l'image compressé (vmlinuz). Cette image est
indispensable à oprofile (oprofile.sourceforge.net, pour i386 uniquement)
pour l'optimisation du noyau et de l'espace utilisateur.
.TP  
\fBimage_clean_hook\fP
Lorsqu'elle correspond à un programme, celui\-ci est alors exécuté sur la
racine (temporaire) de l'arborescence du noyau avant l'empaquetage des
sources. Cela n'a aucun effet sur quoi que ce soit d'autre que les sources
en cours d'empaquetage. Si le script agit sur le répertoire courant et ses
fils, l'arborescence originale des sources demeure inchangée. Utile pour
faciliter le modelage des sources du noyau en cours d'empaquetage.
.TP  
\fBsource_clean_hook\fP
Lorsqu'il correspond à un programme, celui\-ci est alors lancé sur la racine
des répertoires des en\-têtes du noyau avant leur empaquetage,
\&\fI./debian/tmp\-source/usr/src/kernel\-source\-X.X.XX\fP. Cela n'a aucun effet
sur quoi que ce soit d'autre que les sources en cours d'empaquetage. Si le
script agit sur le répertoire courant et ses fils, l'arborescence originale
des sources demeure inchangée. Utile pour faciliter le modelage des en\-têtes
du noyau en cours d'empaquetage (en supprimant par exemple les répertoires
de contrôle de version, ou en se débarrassant des architectures non
désirées).
.TP  
\fBheader_clean_hook\fP
Lorsqu'il correspond à un programme, celui\-ci est alors lancé sur la racine
des répertoires des en\-têtes du noyau avant leur empaquetage. Cela n'a aucun
effet sur quoi que ce soit d'autre que les sources en cours
d'empaquetage. Si le script agit sur le répertoire courant et ses fils,
l'arborescence originale des sources demeure inchangée. Utile pour faciliter
la cure d'amaigrissement des en\-têtes du noyau en cours d'empaquetage (en
supprimant par exemple les répertoires de contrôle de version, ou en se
débarrassant des architectures non désirées).
.TP  
\fBdoc_clean_hook\fP
Lorsqu'il correspond à un programme, celui\-ci est alors exécuté sur la
racine de l'arborescence de la documentation avant son empaquetage. Cela n'a
aucun effet sur quoi que soit d'autre que la documentation en cours
d'empaquetage. Si le script agit sur le répertoire courant et ses fils,
l'arborescence originale demeure inchangée. Utile pour faciliter le modelage
de la documentation du noyau en cours d'empaquetage (en supprimant par
exemple les répertoires de contrôle de version, ou en se débarrassant des
architectures non désirées).
.TP 
\fBextra_docs\fP
Cette variable pourra contenir le chemin vers toute documentation
supplémentaire qui sera alors installée dans le répertoire
\fI/usr/share/doc/kernel\-image\-X.X.XX/\fP. Il n'y a pas de détection de conflit
de noms, et les fichiers ne sont pas compressés. De ce fait, si vous voulez
que ces fichiers soient compressés, compressez\-les et indiquez alors le
chemin vers le fichier compressé. La variable d'environnement \fBEXTRA_DOCS\fP
a priorité sur cette option, et indiquera certainement la manière de
spécifier la documentation supplémentaire.
.TP 
\fBkpkg_follow_symlinks_in_src\fP
Cette option est particulièrement utile à ceux qui se servent d'un ensemble
de liens symboliques pour compiler leurs noyaux. Avec cette option, les
paquets kernel\-source et kernel\-header ne seront pas une simple collection
de liens morts, car les liens symboliques auront été suivis. Notez bien que
tout lien symbolique présent dans les sources du noyau sera résolu. La
variable d'environnement \fBKPKG_FOLLOW_SYMLINKS_IN_SRC\fP a priorité sur cette
option.
.TP 
\fBmake_libc_headers\fP
Variable pour le responsable de la \fIlibc6\fP qui, lorsqu'il compile la
\fIlibc6\fP, empaquette aussi les en\-têtes correspondants. \fBN'Y TOUCHEZ PAS\fP à
moins de savoir ce que vous faites, car une différence entre les en\-têtes
que vous empaquetez et la \fIlibc6\fP peut vraiment déclencher de subtiles
instabilités dans tous les codes compilés sur votre machine. Vous êtes
prévenu. La variable d'environnement \fBMAKE_LIBC_HEADERS\fP a priorité sur
cette option.
.TP 
\fBCONCURRENCY_LEVEL\fP
Si elle est définie, cette variable règle le nombre de processus concurrents
qu'utilisera make pour compiler le noyau et les modules, grâce à l'option
\fI\-j\fP de la commande make lancée par la cible \fBbuild\fP de \fBmake\-kpkg\fP. Doit
être, si elle est définie, un (petit) entier.
.TP 
\fBARCH_IN_NAME\fP
Si elle est définie, cette variable force \fBmake\-kpkg\fP à utiliser un nom
rallongé pour le paquet de l'image du noyau, en intégrant la
sous\-architecture dans le nom de l'image\ ; ainsi, on peut écrire des
scripts pour créer de multiples sous\-architectures, l'une après
l'autre. \fBNotez bien\fP que seul le \fInom\fP du paquet est changé, pas
l'emplacement des modules, etc.
.TP 
\fBCONFDIR\fP
Cette variable pourra pointer sur un répertoire contenant les fichiers
\&\fI.config\fP spécifiques aux différentes architectures (consultez
\fI/usr/share/kernel\-package/Config\fP pour voir des exemples). Pratique pour
compiler pour plusieurs architectures. Pointe par défaut sur
\fI/usr/share/kernel\-package/Config\fP.
.TP 
\fBINITRD_CMD\fP
Réglez cette variable en lui donnant une liste d'exécutables (séparé par des
espaces) permettant la création du disque virtuel (RAM Disk) initial. Elle
n'a d'effet que si vous installez une image du noyau qui utilise un disque
virtuel au démarrage. Les commandes indiquées doivent être directement
compatibles avec \fImkinitrd\fP. Cette variable définit le mode de construction
par défaut du script post\-installation lors de l'installation, qui peut être
outrepassée par l'administrateur pour chacune des cibles grâce à
\fB/etc/kernel\-img.conf\fP. Si cette liste n'est pas définie, elle pointe par
défaut sur un sous\-ensemble de \fImkinitrd mkinitrd.yaird mkinitramfs\fP, ce
sous\-ensemble étant choisi selon la version du noyau en cours de
construction, afin que chacun puisse faire ses réglages manuellement (s'il
sait ce qu'il fait).
.TP 
\fBIMAGEDIR\fP
Si vous voulez que l'image soit stockée ailleurs que dans \fI/boot\fP,
définissez le répertoire de destination dans cette variable. Cela pourra
être utile aux utilisateurs de \fBloadlin\fP. Pointe par défaut sur \fI/boot\fP.
.TP 
\fBMODULE_LOC\fP
Réglez cette variable, soit dans votre environnement, soit dans le fichier
de configuration, afin qu'elle pointe sur l'endroit où sont situés les
modules additionnels. Pointe par défaut sur \fI/usr/src/modules\fP.
.TP 
\fBCONFDIR\fP
Réglez cette variable, soit dans votre environnement, soit dans le fichier
de configuration, afin qu'elle pointe sur l'endroit où sont situés les
fichiers de configuration du noyau. Pointe par défaut sur
\fI/usr/share/kernel\-package/Config\fP.
.TP 
\fBPATCH_DIR\fP
Réglez cette variable, soit dans votre environnement, soit dans le fichier
de configuration, afin qu'elle pointe sur l'endroit où sont situés les
patches additionnels du noyau. Pointe par défaut sur
\fI/usr/src/kernel\-patches/ARCHITECTURE\fP.
.TP 
\fBALL_PATCH_DIR\fP
Réglez cette variable, soit dans votre environnement, soit dans le fichier
de configuration, afin qu'elle pointe sur l'endroit où sont situés les
patches additionnels du noyau non liés à des architectures. Pointe par
défaut sur \fI/usr/src/kernel\-patches/all\fP.
.PP
Le contenu d'une variable est définie de la façon suivante\ :
.IP a)
Les valeurs par défaut sont présentes dans le fichier «\ rules\ ». Ces
valeurs sont utilisées si aucun réglage n'est fait.
.IP b)
Les variables peuvent être réglées dans le fichier de configuration
\fI/etc/kernel\-pkg.conf\fP. Ces valeurs ont priorité sur les valeurs par
défaut.
.IP c)
Les variables peuvent aussi être définies en donnant une valeur à la
variable d'environnement correspondante. Ces valeurs ont priorité sur le
fichier de configuration et sur les valeurs par défaut.
.IP d)
Par l'utilisation des options de \fBmake\-kpkg\fP, ou, lorsqu'on utilise
directement les fichiers «\ rules\ », sur la ligne de commande.
.br
\fB# xxx/rules DEBIAN_REVISION=2.0a kernel_image\fP
.br
Cette commande a priorité sur toutes les méthodes décrites ci\-dessus.
.SH FICHIERS
Le fichier ici décrit est \fI/etc/kernel\-pkg.conf\fP ou \fI~/.kernel\-pkg.conf\fP.
.SH "VOIR AUSSI"
\fBmake\-kpkg\fP(1), \fBkernel\-img.conf\fP(5), \fBmake\fP(1), \fBle manuel GNU Make\fP
.SH BOGUES
Il n'y a pas d'erreur. Toute ressemblance avec un bogue est du
délire. Vraiment.
.SH AUTEUR
Cette page a été écrite par Manoj Srivastava, <srivasta@debian.org>,
pour le système Debian GNU/Linux.
.SH TRADUCTION
Cette page de manuel a été traduite et est maintenue par Sylvain Cherrier
<sylvain.cherrier@free.fr> et les membres de la liste
<debian\-l10n\-french@lists.debian.org> entre 2004 et 2007.
