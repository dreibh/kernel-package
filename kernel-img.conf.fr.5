.\" Hey, Emacs! This is an -*- nroff -*- source file.
.\" Copyright (c) 2000 Manoj Srivastava <srivasta@debian.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" $Id: kernel-img.conf.5,v 1.25 2003/09/28 01:16:52 srivasta Exp $
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH KERNEL\-IMG.CONF 5 "21 mars 2000" Debian "Manuel Debian GNU/Linux"
.\" NAME should be all caps, SECTION should be 1-8, maybe w/ subsection
.\" other parms are allowed: see man(7), man(1)
.SH NOM
kernel\-img.conf \- fichier de configuration général pour les paquets d'image
du noyau
.SH SYNOPSIS
\fI/etc/kernel\-img.conf\fP
.SH DESCRIPTION
Le processus de post\-installation de l'image du noyau recherche le fichier
\fI/etc/kernel\-img.conf\fP. Ce simple fichier permet d'utiliser des options
locales pour gérer certains des aspects de l'installation, outrepassant
ainsi les valeurs par défaut intégrées dans l'image elle\-même.
.PP
Le format de ce fichier consiste simplement en paires \fBVARIABLE =
VALEUR\fP. Des valeurs booléennes peuvent être écrites \fIYes, True, 1\fP, ou
\fINo, False, 0\fP, sans distinction entre les majuscules et les minuscules. Si
ce fichier n'existe pas, et que le lien symbolique \fI/vmlinuz\fP n'existe pas
non plus, il est automatiquement créé par le script d'installation. Le
script demande s'il faut créer le lien symbolique et stocke la réponse dans
\fI/etc/kernel\-img.conf\fP.
.PP
Les variables actuellement modifiables par l'utilisateur sont les suivantes\ :
.TP 
\fBlink_in_boot\fP
Valeur «\ Yes\ », si vous voulez que le lien symbolique vers l'image du
noyau, à savoir \fIvmlinuz\fP, soit dans \fI/boot\fP plutôt que dans \fI/\fP (valeur
par défaut). L'ancien nom, prêtant à confusion, image_in_boot, est
déconseillé, car c'est habituellement le lien symbolique qui est déplacé. La
valeur par défaut est «\ No\ ».
.TP 
\fBdo_symlinks\fP
Par défaut, le script de post\-installation de l'image créera ou mettra à
jour les liens symboliques \fI/vmlinuz\fP et \fI/vmlinuz.old\fP. Ceci est vrai si
le lien \fI/vmlinuz\fP existe déjà. Cependant, en l'absence de ce lien, le
script recherchera ce fichier de configuration. Si ce fichier n'existe pas,
le script demandera à l'utilisateur s'il faut créer le lien symbolique et
enregistrera la réponse dans un nouveau fichier \fI/etc/kernel\-img.conf\fP. Si
le fichier de configuration existe déjà et si cette option vaut «\ No\ »,
aucun lien symbolique ne sera créé. Cela est fait pour les gens qui peuvent
démarrer leur machine par d'autres méthodes et qui n'aiment pas que les
liens symboliques encombrent le répertoire /. La valeur par défaut est fixée
à «\ Yes\ ».
.TP 
\fBminimal_swap\fP
Si le lien symbolique /vmlinuz ne pointe pas sur une image identique à celle
qui va être installée, le script de post\-installation renomme /vmlinuz en
/vmlinuz.old et crée un lien symbolique de l'image du noyau vers /vmlinuz\ ;
il s'agit d'empêcher que /vmlinuz et /vmlinuz.old ne pointent vers l'image
en cours, ce qui pourrait être désastreux si cette image est défectueuse en
quoi que ce soit. Cependant, si cette option est activée, rien n'est fait si
/vmlinuz.old pointe sur l'image installée (les liens symboliques sont
échangés). La valeur par défaut est «\ no\ ».
.TP 
\fBno_symlinks\fP
Cette variable définit s'il faut utiliser des liens symboliques avec le
fichier \fIimage\fP. C'est l'opposée de \fIreverse_symlinks\fP et peut être
utilisée avec \fIlink_in_boot (image_in_boot)\fP. Si cette variable est
positionnée à Yes, l'image réelle est mise dans vmlinuz plutot que dans
/boot/vmlinuz\-X.X.XX. Si vous utilisez aussi link_in_boot,
/boot/vmlinuz\-X.X.XX est mis dans /boot/vmlinuz. L'ancienne image /vmlinuz
est renommée d'office en vmlinuz.old.(Normalement, cela n'est fait que si la
version de la nouvelle image est différente de l'ancienne.) Vous ne pouvez
avoir que deux images, à moins de prendre des mesures pour conserver des
copies des anciennes images. Cela peut servir aux gens qui ont \fI/boot\fP sur
un système qui n'accepte pas les liens symboliques, et qui utilisent alors
loadlin comme programme de démarrage. C'est un bidouillage. La valeur par
défaut est «\ No\ ».
.TP 
\fBreverse_symlinks\fP
Cette variable définit s'il faut utiliser des liens symboliques inversés
avec le fichier \fIimage\fP (c'est\-à\-dire que le fichier réel n'a pas de numéro
de version et que c'est le lien qui possède ce numéro). C'est l'opposée de
\fIno_symlinks\fP, et elle peut être utilisée avec \fIlink_in_boot
(image_in_boot)\fP. Tout se passe comme avec \fIno_symlinks\fP, sauf que
/boot/vmlinuz\-X.X.XX est un lien symbolique vers la nouvelle image réelle,
vmlinuz. Là aussi, vous ne pouvez avoir que deux images, à moins de prendre
d'autres mesures. Les liens symboliques plus anciens sont laissés
ballants. Cela peut servir à ceux qui ont \fI/boot\fP sur umsdos et qui ne
peuvent voir les liens symboliques dans dos mais veulent connaître la
version de l'image quand ils sont sous Linux. C'est un bidouillage. La
valeur par défaut est «\ No\ ».
.TP 
\fBimage_dest\fP
Si vous voulez que le lien symbolique (ou l'image, si \fBmove_image\fP est
positionnée) soit placé ailleurs que dans \fI/\fP, indiquez le répertoire de
votre choix. Veuillez remarquer que cette variable n'est pas une variable
booléenne. Cela peut servir aux utilisateurs de \fBloadlin\fP qui pourront
déclarer à la fois cette variable et \fBmove_image\fP. La valeur par défaut est
\fI/\fP. Elle peut être utilisée avec toutes les options ci\-dessus, sauf
\fBlink_in_boot (image_in_boot)\fP, ce qui n'aurait pas de sens. Si vous
déclarez à la fois \fBimage_dest\fP et \fBlink_in_boot (image_in_boot)\fP,
\fBlink_in_boot (image_in_boot)\fP prend le dessus.
.TP 
\fBpostinst_hook\fP
Indiquez ici un script à exécuter pendant l'installation, après que tous les
liens symboliques ont été créés mais avant de lancer le programme
d'amorçage. Le chemin peut être un chemin relatif si le script est situé
dans un répertoire «\ sûr\ » (c'est\-à\-dire s'il est dans /bin, /sbin,
/usr/bin, ou /usr/sbin), sinon il doit être exprimé en absolu. Avant
d'appeler ce script, la variable d'environnement \fBSTEM\fP doit être définie
avec la même valeur que l'argument \fI\-\-stem\fP (ou contenir la valeur par
défaut, linux). Ce script doit être appelé avec deux arguments, le premier
est la \fIversion\fP de l'image du noyau, et le second est l'\fIadresse\fP de
l'image du noyau elle\-même. Des erreurs dans le script déclencheront un
échec de la post\-installation. Puisque l'on utilise debconf avant l'appel du
script, ce dernier ne générera pas de message de diagnostic sur la sortie
standard. En effet, au moment où la post\-installation appelle \fBdb_stop\fP,
debconf ne rétablit pas la sortie standard, et tous les messages en sa
direction disparaissent. Un exemple pour les utilisateurs de Grub est donné
dans le répertoire /usr/share/doc/kernel\-package/.
.TP 
\fBpostrm_hook\fP
Indiquez ici un script à exécuter dans le postrm, c'est\-à\-dire, après que
l'image a été supprimée et toutes les actions de suppression effectuées). Le
chemin peut être un chemin relatif si le script est situé dans un répertoire
«\ sûr\ » (c'est\-à\-dire s'il est dans /bin, /sbin, /usr/bin, ou /usr/sbin),
sinon il doit être exprimé en absolu. Ce script doit être appelé avec deux
arguments, le premier est la \fIversion\fP de l'image du noyau, et le second
est l'\fIadresse\fP de l'image du noyau elle\-même. Des erreurs dans le script
déclencheront des messages d'avertissement mais seront ignorées. Puisqu'on
utilise debconf avant l'appel du script, ce dernier ne générera pas de
message de diagnostic sur la sortie standard. En effet, au moment où la
post\-installation appelle \fBdb_stop\fP, debconf ne rétablit pas la sortie
standard, tous les messages en sa direction disparaissent.
.TP 
\fBpreinst_hook\fP
Indiquez ici un script à exécuter avant que le paquet ne soit dépaqueté\ ;
il peut servir à effectuer d'autres contrôles. Le chemin peut être un chemin
relatif si le script est situé dans un répertoire «\ sûr\ » (c'est\-à\-dire
s'il est dans /bin, /sbin, /usr/bin, ou /usr/sbin), sinon il doit être
exprimé en absolu. Ce script doit être appelé avec deux arguments, le
premier est la \fIversion\fP de l'image du noyau, et le second est l'\fIadresse\fP
de l'image du noyau elle\-même.
.TP 
\fBprerm_hook\fP
Indiquez ici un script à exécuter avant que les fichiers du paquet ne soient
supprimés (donc tout fichier ajouté peut être supprimé). Le chemin peut être
un chemin relatif si le script est situé dans un répertoire «\ sûr\ »
(c'est\-à\-dire s'il est dans /bin, /sbin, /usr/bin, ou /usr/sbin), sinon il
doit être exprimé en absolu. Ce script doit être appelé avec deux arguments,
le premier est la \fIversion\fP de l'image du noyau, et le second est
l'\fIadresse\fP de l'image du noyau elle\-même. Des erreurs dans le script
déclencheront un échec de prerm. Puisqu'on utilise debconf avant l'appel du
script, ce dernier ne générera pas de message de diagnostic sur la sortie
standard. En effet, au moment où la post\-installation appelle \fBdb_stop\fP
debconf ne rétablit pas la sortie standard, tous les messages en sa
direction disparaissent.
.TP 
\fBramdisk\fP
Indiquez ici une liste d'exécutables (séparés par des espaces) afin de créer
un RAM disk initial. Cela n'a d'effet que pour l'installation d'une image du
noyau qui utilise un ramdisk initial. Les commandes indiquées doivent
fonctionner d'une manière identique à \fImkinitrd\fP. Lors de l'installation,
ces exécutables sont appelés avec les options \fI\-\-supported\-host\-version\fP et
\fI\-\-supported\-target\-version\fP, afin de s'assurer qu'ils sont compatibles
avec le noyau en cours d'utilisation et avec le noyau en cours
d'installation (respectivement). Les exécutables non compatibles sont
retirés de la liste. Le premier outil valide est utilisé pour créer le RAM
disk initial. L'installation échouera si aucun outil valide n'est
trouvé. Cette liste contient par défaut un sous\-ensemble de \fImkinitrd
mkinitrd.yaird mkinitramfs\fP.
.TP 
\fBsrc_postinst_hook\fP
Contrairement aux autres variables de type «\ hook\ », cette variable
indique un script qui sera exécuté pendant la phase de post\-installation
d'un paquet de documentation, d'en\-têtes ou de sources. L'utilisation de
cette possibilité pour les paquets d'en\-têtes est maintenant déconseillé\ ;
le script de post\-installation des paquets d'en\-têtes doit seulement lancer
le script headers_postinst_hook. Le chemin peut être un chemin relatif si le
script est situé dans un répertoire «\ sûr\ » (c'est\-à\-dire s'il est dans
/bin, /sbin, /usr/bin, ou /usr/sbin), sinon il doit être exprimé en
absolu. Ce script sera appelé avec deux arguments, le premier étant le
\fInom\fP du paquet qui est installé (p. ex. kernel\-source\-X.X.XX ou
kernel\-headers\-X.X.XX), le second étant la \fIversion\fP du paquet. Des erreurs
dans le script déclencheront un échec de la post\-installation.
.TP 
\fBheaders_postinst_hook\fP
Contrairement aux autres variables de type «\ hook\ », cette variable
indique un script qui sera exécuté pendant la phase de post\-installation
d'un paquet d'en\-têtes seulement. Le chemin peut être un chemin relatif si
le script est situé dans un répertoire «\ sûr\ » (c'est\-à\-dire s'il est dans
/bin, /sbin, /usr/bin, ou /usr/sbin), sinon il doit être exprimé en
absolu. Ce script sera appelé avec deux arguments, le premier étant le
\fInom\fP du paquet qui est installé (p. ex. kernel\-headers\-X.X.XX), le second
étant la \fIversion\fP du paquet. Des erreurs dans le script déclencheront un
échec de la post\-installation.
.TP 
\fBmove_image\fP
Au lieu de créer un lien symbolique vers \fBimage_dest\fP (ou l'inverse si
\fBreverse_symlinks\fP est demandée, l'image est déplacée de \fIboot\fP vers
\fIimage_dest\fP. Si \fBreverse_symlinks\fP est demandée, \fIboot\fP contiendra un
lien symbolique vers l'image réelle. Cette option peut servir à ceux qui
utilisent loadlin, et qui pourraient vouloir déplacer l'image sur une autre
partition dos. Cette variable n'a pas de valeur par défaut.
.TP 
\fBclobber_modules\fP
Quand cette variable est déclarée, le script de pré\-installation cherchera à
déplacer silencieusement /lib/modules/version, si cette version est la même
que celle de l'image à installer. Utilisez\-la à vos risques et périls. Cette
variable n'a pas de valeur par défaut.
.TP 
\fBwarn_reboot\fP
Cette variable peut être utilisée pour désactiver l'émission des alertes («\ warnings\ ») lors de l'installation d'une image du noyau qui est de la même
version que celle actuellement lancée. Si la liste des modules a changé, les
dépendances entre modules ont peut\-être été modifiées, et les modules du
nouveau noyau pourraient ne pas fonctionner correctement avec le noyau
actuel, notamment si la liste des ABI du noyau a changé entre les
deux. C'est une bonne idée de redémarrer la machine, et un message vous le
précisera. Si vous savez ce que vous faites, vous pouvez définir cette
variable à «\ no\ ». Cette variable est active par défaut.
.TP 
\fBdo_bootloader\fP
Si la valeur de cette variable est «\ NO\ », elle empêche le script
post\-installation de lancer le programme de démarrage. La valeur par défaut
est «\ Yes\ ».
.TP 
\fBrelative_links\fP
Si la valeur de cette variable est «\ Yes\ », le script post\-installation de
l'image s'assurera par tous les moyens que les liens symboliques sont
relatifs. Normalement, ils le sont, et il est facile de savoir si des liens
relatifs fonctionnent. La valeur par défaut est «\ NO\ ».
.TP 
\fBdo_initrd\fP
Si la valeur de cette variable est «\ YES\ », le script de post\-installation
de \fIkernel\-image\fP n'affiche pas d'avertissement quand on installe un noyau
avec initrd. Cela suppose que le programme de démarrage doit être
correctement configuré et qu'il sache amorcer l'image initrd. Valeur par
défaut\ : «\ NO\ ». Il faut préférer à cette variable la variable
\fBwarn_initrd\fP, mais remarquez que son sens est inversé.
.TP 
\fBwarn_initrd\fP
Si la valeur de cette variable est «\ NO\ », le script de post\-installation
de \fIkernel\-image\fP n'affiche pas d'avertissement quand on installe un noyau
avec initrd. Il est donc nécessaire que le programme de démarrage soit
correctement configuré et qu'il sache amorcer l'image initrd. Cette variable
est maintenant préférée à \fBdo_initrd\fP, puisqu'il s'agit d'éviter les
\fBavertissements\fP. La valeur par défaut est «\ Yes\ ».
.TP 
\fBuse_hard_links\fP
Cette variable existe pour ceux qui ne peuvent pas gérer les liens
symboliques (certains programmes de démarrage n'acceptent pas les liens
symboliques, par exemple). Si la valeur de cette variable est «\ Yes\ », la
post\-installation de l'image utilisera des liens physiques pour /vmlinuz et
/vmlinuz.old, qui sont gérés automatiquement. Cette variable est
probablement compatible avec les variables \fBmove_image\fP et
\fBreverse_symlinks\fP. Avertissement\ : C'est à l'utilisateur de s'assurer que
le répertoire \fBimage_dest\fP et l'emplacement de l'image (nominativement
/boot) sont sur le même système de fichiers, car on ne peut créer des liens
physiques d'un système de fichiers à un autre. \fBVous avez été prévenus\fP.
.TP 
\fBrelink_build_link\fP
Cette option manipule le «\ build link\ » créé par les noyaux récents. Si le
lien est un lien ballant et si les en\-têtes correspondants semblent avoir
été installés sur le système, un nouveau lien symbolique sera créé et
pointera sur eux. La valeur par défaut est de relier le lien de construction
(«\ YES\ »).
.TP 
\fBforce_build_link\fP
Cette option manipule le lien de construction créé par les noyaux
récents. Si le lien est un lien ballant, un nouveau lien symbolique sera
créé et pointera sur /usr/src/kernel\-headers\-X.Y.ZZ, que ces en\-têtes aient
été installées ou non. Il n'y a pas de valeur par défaut, les liens
symboliques potentiellement ballants ne sont pas créés par défaut.
.TP 
\fBrelink_src_link\fP
Cette option manipule le «\ source link\ » créé par les noyaux récents. Si
le lien est un lien ballant, il sera effacé au moment de l'installation. La
valeur par défaut est de relier (effacer) le lien des sources («\ YES\ »).
.TP 
\fBmkimage\fP
La valeur sera une commande pour créer une image initrd, un répertoire
étant donné. Elle est passée à l'option \fI\-m\fP du programme \fImkinitrd\fP.
Par exemple,
  mkimage="genromfs \-d %s \-f %s"
 ou
  mkimage="mkcramfs %s %s"
.TP 
\fBsilent_modules\fP
Cette option est là pour ceux qui sont excédés par les avertissements
concernant l'existence d'un répertoire \fI/lib/modules/$version\fP. Ce
répertoire peut appartenir à un ancien paquet \fIkernel\-image\-$version\fP, qui
a peut\-être même disparu, auquel cas les modules restant dans ce répertoire
peuvent poser problème\ ; ou bien, ce répertoire a le droit d'exister parce
qu'on installe un paquet indépendant des modules d'une version du noyau qui
a déjà été dépaquetée. Dans ce dernier cas, l'existence de ce répertoire est
bénigne. Si vous utilisez cette variable, vous n'aurez plus la possibilité
d'interrompre l'installation si un répertoire \fI/lib/modules/$version\fP est
détecté. Cette variable n'a pas de valeur par défaut.
.TP 
\fBsilent_loader\fP
Si la valeur de cette variable est déclarée, la question posée dans la phase
d'installation et avant le lancement du programme de démarrage ne sera pas
affichée. Cette option n'influe pas sur l'exécution du programme de
démarrage (consultez \fBdo_bootloader\fP pour savoir comment contrôler son
exécution. L'absence du fichier de configuration rendra le processus
d'installation loquace et interactif).
.TP  
\fBignore_depmod_err\fP
Si elle est déclarée, cette variable empêchera une interrogation de
l'utilisateur après un problème avec depmod dans le script de
post\-installation. Cela facilite les installations automatiques, mais cela
peut cacher un problème avec l'image du noyau. Un diagnostic est affiché.
.SH FICHIERS
Le fichier décrit ici est \fI/etc/kernel\-img.conf\fP.
.SH "VOIR AUSSI"
\fBmake\-kpkg\fP(1), \fBkernel\-pkg.conf\fP(5), \fBmake\fP(1), \fBle manuel GNU Make\fP
.SH BOGUES
Il n'y a pas d'erreur. Toute ressemblance avec un bogue est du
délire. Vraiment.
.SH AUTEUR
Cette page a été écrite par Manoj Srivastava, <srivasta@debian.org>,
pour le système Debian GNU/Linux.
.SH TRADUCTION
Cette page de manuel a été traduite et est maintenue par Sylvain Cherrier
<sylvain.cherrier@free.fr> et les membres de la liste
<debian\-l10n\-french@lists.debian.org> entre 2004 et 2007.
