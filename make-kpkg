#! /usr/bin/perl
#                              -*- Mode: Perl -*-
# make-kpkg ---
# Author           : root ( root@melkor.pilgrim.umass.edu )
# Created On       : Mon Jun 17 01:10:11 1996
# Created On Node  : melkor.pilgrim.umass.edu
# Last Modified By : Manoj Srivastava
# Last Modified On : Fri Jan 19 11:44:29 2001
# Last Machine Used: glaurung.green-gryphon.com
# Update Count     : 149
# Status           : Unknown, Use with caution!
# HISTORY          :
# Description      :
#
#
#
#    $Id: make-kpkg,v 1.48 2001/01/19 17:53:57 srivasta Exp $
#
require 5.002;
use strict;
use Getopt::Long;

=head1 NAME

make-kpkg - build Debian kernel packages from Linux kernel sources.

=cut

($main::MYNAME     = $main::0) =~ s|.*/||;
$main::Author      = "Manoj Srivastava";
$main::AuthorMail  = "srivasta\@debian.org";
$main::Version     = '$Revision: 1.48 $ ';

my $help_opt=0; 
my $revision=0; 
my $flavour=''; 
my $added_modules='';
my $added_patches='';
my $arch='';
my $cross_compile='';
my $config_target='oldconfig';
my $subarch='';
my $signature="" ;
my $targ_opt=0; 
my $noexec; 
my $zimage; 
my $bzimage; 
my $root_cmd; 
my $arch_in_name=0;
my $unsign_source='';
my $unsign_changelog='';

my %option_ctl = ("help"            => \$help_opt,
		  "noexec"          => \$noexec,
		  "revision=s"      => \$revision,
		  "flavour=s"       => \$flavour,
		  "added_modules=s" => \$added_modules,
		  "added_patches=s" => \$added_patches,
                  "arch=s"          => \$arch,
                  "config=s"        => \$config_target,
                  "cross_compile=s" => \$cross_compile,
		  "subarch=s"       => \$subarch,
		  "arch_in_name"    => \$arch_in_name,
		  "pgpsign=s"       => \$signature,
		  "targets"         => \$targ_opt,
		  "zimage"          => \$zimage,
		  "rootcmd=s"       => \$root_cmd,
		  "us"              => \$unsign_source,
		  "uc"              => \$unsign_changelog,
		  "bzimage"         => \$bzimage
		 );

=head1 SYNOPSIS

 usage: make-kpkg [options] [target [target ...]] 

=cut

=head1 DESCRIPTION

This manual page explains the  Debian  B<make-kpkg>  utility,
which  is  used  to create the kernel related Debian pack­
ages. This utility needs to be run from a top level  Linux
kernel source directory. 

=cut

=head1 OPTIONS

=over 3

=item B<--help> Print out a usage message.

=item B<--revision> number

=over 2

Sets the Debian revision number for the packages produced to the
argument B<number>. This has certain constraints: It only has an
effect during the configure phase (in other words, if a file called
stamp-configure or both debian/changelog and debian/official exists,
this option has no effect -- run make-kpkg clean or manually remove
stamp-configure, and stamp-debian (and debian/official, if that
exists) for it to have an effect). I suggest you run make-kpkg clean
unless you know what you are doing. Secondly, it may contain only
alphanumerics and the characters + . (full stop, and plus)
and should contain a digit. B<NOTE>: No hyphens allowed. (Look at the
Debian policy manual for details). Optionally, you may prepend the
revision with a digit followed by a colon (:)

This is because  B<dpkg> imposes an ordering on version numbers,
so that it can tell whether packages are being up or downgraded and
so that dselect can tell whether a package it finds available is
newer than the one installed on the system.


=back

=item B<--flavour> foo

=over 2

Sets the kernel flavour to the argument B<number>. The flavour is also
appended to the package name. You need a patched Makefile to make this
work properly (see /usr/share/doc/kernel-package/Flavours.gz).  It may
contain only alphanumerics and the characters - + . (full stop,
hyphen, and plus). Uppercase letter are also not permitted under the
Policy for a new package. B<NOTE>: Hyphens are discouraged.  (Look at
Chapters 4 and  5 of the Programmers manual for details).


=back

=item B<--added_modules> foo

=over 2

The argument should be a comma or space separated list of additional
add-on modules (not in the main kernel tree) that you wish to
build when you invoke the modules_blah targets. You may give full path
names of the directory the modules reside in, or just the module name
if it can be found in C<MODULE_LOC>, which defaults to /usr/src/modules.
The default is that all modules in  C<MODULE_LOC> are compiled when
the modules_blah targets are invoked.

=back

=item B<--added_patches> foo

=over 2

The argument should be a comma or space separated list of additional
patches to the kernel sources. Unlike the treatment of the modules,
you may only give the patch name (not the full path name of the patch
file).  It shall be applied during the configure phase (and removed in
the clean phase) if it can be found in the directories
C<ALL_PATCH_DIR/{apply,unpatch}/>, which defaults to a subdirectory of
/usr/src/kernel-patches/.  The default is that all patches are applied
if requested (By setting the env variable C<PATCH_THE_KERNEL>)

=back

=item B<--arch> foo

=over 2

Sets the Architecture. This is mostly useful when cross compiling.

=back

=item B<--cross_compile> foo

=over 2

Sets the target string. This is mostly useful when cross compiling.

=back

=item B<--subarch> foo

=over 2

Some architectures (the Alpha, and the m68k) require a different
kernel for each subarchitecture. This option provides a way of
specifying it as an argument to make-kpkg. Please note that additional
support for sub architectures may be required in the kernel sources to
actually make this do anything.


=back

=item B<--arch_in_name> foo


=over 2

This option uses an extended name for the kernel image package by
embedding the subarchitecture in the image name, so one could write a
script to create multiple subarchitectures one after the other. You
may also do this by setting the environment variable ARCH_IN_NAME. 

=back

=item B<--pgpsign> name

=over 2

Set the string used to sign the B<changes> file for any external modules
in I</usr/src/modules/> using PGP. This option will override the builtin
default and the site wide customizations stored in the file
I</etc/kernel-pkg.conf>.

=back

=item B<--config> I<target>

=over 2

Change the type of configure done from the default C<oldconfig>.
I<target> must be one of C<oldconfig>, C<config>, C<menuconfig>,
C<xconfig>, or C<old>, C<menu> or C<x>.

This option is particularly useful when using PATCH_THE_KERNEL if some
of the patches change what configuration options are available.

=back

=item B<--targets>

=over 2

Prints out a list of known targets. See the Section B<Targets> below.

=back

=item B<--noexec>

=over 2

Pass  a  B<-n> option to the I<make> so that commands are merely
printed  to  the  screen  but  not actually  executed.  This is very
useful for debugging.

=back

=item B<--zimage>

=over 2

Makes a zImage kernel rather than a bzImage  kernel (the  default).
Useful for people having problems with bzImage kernels.

=back

=item B<--bzimage>

=over 2

Makes a bzImage kernel. Useful for people who  want a bzImage kernel
on sites where the default is zIm age kernels.

=back

=item B<--rootcmd>

=over 2

The command that provides a means of gaining super user access (for
example, `sudo' or `fakeroot') as needed by dpkg-buildpackages's C<-r>
option. This is only relevant for the buildpackage target.

=back

=item B<--us>

=over 2

This option is passed to dpkg-buildpackage, and directs that package
not to sign the source. This is only relevant to the buildpackage
target. 

=back

=item B<--uc>

=over 2

This option is passed to dpkg-buildpackage, and directs that package
not to sign the changelog. This is only relevant to the buildpackage
target. 

=back

=back

The options maybe shortened to the smallest unique string,
and may be entered with either a - or a -- prefix, and you
may use a space or an = symbol between  an  option  string
and a value.

=cut


my $usage = <<"EOUSAGE";
This program should be run in a linux kernel source top level directory.
/usr/share/doc/kernel-package/Problems.gz contains a list of known problems.

usage: $main::MYNAME [options] target [target ...]
  where options are:
 --help                This message.
 --revision number     The debian revision number. ([a-z.+0-9]) (Must
                         have digit, no hyphen allowed)
 --flavour  foo        an additional kernel sub-version. ([-a-z.+0-9])
                         see /usr/share/doc/kernel-package/Flavours.gz
 --added_modules foo   Comma/space separated list of add on modules
                       affected by the modules_<blah> targets
 --added_patches bar   Comma/space separated list of patches applicable
                        when patch_the_kernel is turned on
 --arch     foo        architecture
 --cross_compile       target string
 --subarch  bar        Set the sub arch for the image being compiled
                        (have to be on a compatible machine).
 --arch_in_name        Embedd the subarch in the image package name
 --pgpsign  name       A ID used to sign the changes file using pgp.
 --targets             Lists the known targets.
 --zimage              Create a kernel using zImage rather than bzImage
 --bzimage             Create a kernel using bzImage (in case the site
                       wide default is zimage, as set in
                       /etc/kernel-pkg.conf) 
 --rootcmd method      A command that provides a means of gaining
              	       super user ccess (for example, `sudo' or
              	       `fakeroot') as needed by dpkg-buildpackages's
              	       -r option.  This is only relevant for the
              	       buildpackage target.
 --us                  This option is passed to dpkg-buildpackage, and
                       directs that package not to sign the
                       source. This is only relevant for the
                       buildpackage target. 
 --uc                  This option is passed to dpkg-buildpackage, and
                       directs that package not to sign the
                       changelog. This is only relevant for the
                       buildpackage target. 

Use one of --zimage or --bzimage, or none, but not both.

Option Format:
The options may be shortened to the smallest unique string, and may
be entered with either a - or a -- prefix, and you may use a space
between an option string and a value.

Version: $main::Version
$main::Author <$main::AuthorMail>
EOUSAGE
;

=head1 TARGETS

=over 3

=item B<clean>

=over 3

Cleans the kernel source directory of all files created by target
B<build>, and runs a I<make distclean>. (Please look at a Linux kernel
Makefile for details).  Please note that although we take care of the
list of current kernel configuration contained in the file I<.config>,
the file I<include/linux/autoconf.h> is not preserved.

=back

=item B<buildpackage>

=over 3

This target runs the targets B<clean>, B<build>, and B<binary>, and
produces the complete package using B<dpkg-buildpackage>.

=back

=item B<binary>

=over 3

This target produces all four Debian kernel packages by running the
targets B<kernel_source>, B<kernel_headers>, B<kernel_doc> and 
B<kernel_image>.

=back

=item B<kernel_source>

=over 3

This target produces a debianised package of the Linux kernel
sources. The package produced also has scripts called at install and
delete times that manage the symbolic link I</usr/src/linux> and
ensure that the link is pointed at the latest source/header package on
the system.

=back

=item B<kernel_headers>

=over 3

This target produces a Debian package containing the header files
included in the Linux kernel. The package produced also has scripts
called at install and delete times that manage the symbolic link
I</usr/src/linux> and ensure that the link is pointed at the latest
source/header package on the system.

=back

=item B<kernel_doc>

=over 3

This target produces a Debian package containing the documentation
included in the Linux kernel. 

=back

=item B<kernel_image>

=over 3

This target produces a Debian package of the Linux kernel source
image, and any modules configured in the kernel configuration file
I<.config>.  If there is no I<.config> file in the kernel source
directory, a default configuration is provided similar to the one used
to create the B<Debian> boot-floppies.  The package produced updates
the symbolic links in the root directory to point to the new kernel
image in I</boot>.  It also offers to run the Linux loader, B<LILO>,
creating a configuration file for B<LILO> if needed.  It also offers
to put the new kernel on a floppy, formatting the floppy if needed.
On deletion, the package checks the version of the kernel running, and
refuses to delete a running kernel.

=back

=item B<build>

=over 3

This target, used by target B<kernel_image> above, compiles the Linux
kernel image.

=back

=item B<modules>

=over 3

This target allows you to build all add-on modules and packages that
are very dependent on the precise kernel version they are compiled for
at the same time you build your kernel image.  This target expects to
find the modules or packages under /usr/src/modules, and, for all such
directories, changes to I</usr/src/modules/x>, and runs the B<kdist> rule in
the local I<debian.rules> file.  This target should create the B<Debian>
module package(s), and may also produce a compressed tar file, and a
compressed diff file, with I<md5sums> recorded in a changes file using
B<dpkg-genchanges>.  The file is signed by the same identity that would
be used to sign the kernel packages.

=back

=item B<modules_config>

=over 3

This target allows you to  configure  all  packages under
I</usr/src/modules>. 

=back

=item B<modules_image>

=over 3


This target allows you to build all packages under I</usr/src/modules>,
but does not create the source or diff files, and does not create and
sign a changes file.

=back

=item B<modules_clean>

=over 3


This target allows you to clean the modukes directories.

=back

=item B<configure>

=over 3

This target allows people to create the debian directory and create a
configuration time stamp, so that any special edits to
configuration-generated files are not stomped over later.

=back

=back

=cut


my %Known_targets=("clean"          => 1,
		   "buildpackage"   => 1,
		   "binary"         => 1,
		   "binary-indep"   => 2,
		   "debian"         => 1,
		   "kernel_source"  => 3,
		   "kernel-source"  => 3,
		   "kernel_headers" => 3,
		   "kernel-headers" => 3,
		   "libc-kheaders"  => 3,
		   "kernel_doc"     => 3,
		   "kernel-doc"     => 3,
		   "binary-arch"    => 2,
		   "kernel_image"   => 3,
		   "kernel-image"   => 3,
		   "build"          => 4,
		   "modules"        => 1,
		   "modules_image"  => 1,
		   "modules_config" => 1,
		   "modules_clean"  => 1,
		   "modules-image"  => 1,
		   "modules-config" => 1,
		   "modules-clean"  => 1,
		   "configure"      => 1
		  );

my $targets_help =<<EOTRGT;
 Known Targets are:
===============================================================================
|     Targets                      |   Automatically builds                   |
===============================================================================
| clean                            |                                          |
| buildpackage                     | Builds the whole package                 |
| binary                           | Builds kernel_{source,headers,image,doc} |
|       binary-indep               |                                          |
|            kernel_source         |                                          |
|            kernel_doc            |                                          |
|       binary-arch                |                                          |
|            kernel_headers        |                                          |
|            kernel_image          | Builds build                             |
|                           build  |                                          |
| modules                          |                                          |
| modules_image                    |                                          |
| modules_config                   |                                          |
| modules_clean                    |                                          |
| configure                        | If you wish to edit files                |
|                           debian | generated by make config                 |
| debian                           | Creates ./debian dir, and                |
|                                  | optionally patches the source            |
===============================================================================
See /usr/share/kernel-package/rules for details.
EOTRGT
  ;

sub main (){
  my $ret;
  my $rules_file;
  my $target;
  my $errors = "";
  my $Targets = "";

  $rules_file = "/usr/share/kernel-package/rules";
  
  $ret = GetOptions(%option_ctl);
  if(!$ret) {
	print "$usage\n" ;
	exit 1;
  }
  if ($help_opt || $targ_opt){
    print "$usage" if $help_opt;
    print "$targets_help" if $targ_opt;
    exit 0;
  }

  if ($bzimage && $zimage){
    print "Use only one of bzimage and zimage options.\n";
    print "$usage\n";
    exit 1;
  }

  if ($config_target !~ /^(?:|old|menu|x)(config)?$/) {
    print "Config type must be one of {config,oldconfig,menuconfig,xconfig}.\n";
    print "$usage\n";
    exit 1;
  }
  $config_target .= 'config' if ($1 eq '');

  if ($ENV{'MAKEFLAGS'} =~ /-j/ || $ENV{'MAKEFLAGS'} =~ /--jobs/ ) {
    $errors .= "The environment variable MAKEFLAGS contains the flag -j.\n" .
      "Unfortunately, this is not supported at this time. Instead, please\n" .
	"use the supported mechanism by setting CONCURRENCY_LEVEL\n" ;
  }

  if ($ENV{'MFLAGS'} =~ /-j/ || $ENV{'MFLAGS'} =~ /--jobs/ ) {
    $errors .= "The environment variable MFLAGS contains the flag -j.\n" .
      "Unfortunately, this is not supported at this time. Instead, please\n" .
	"use the supported mechanism by setting CONCURRENCY_LEVEL\n" ;
  }

  if ($root_cmd || $unsign_source || $unsign_changelog){
    if ($root_cmd){
      if ($root_cmd =~ m/^-/o){ 
	$errors .= "The rootcmd option takes a simple command name\n" .
	  "Like sudo or fakeroot. The leading - confuses me.\n" .
	    "rejecting rootcmd $root_cmd";
      }
    }    
    my $argstring = join (' ', @ARGV);
    if ($argstring !~ m/buildpackage/o){
      print STDERR "Warning: The rootcmd, uc, and us options ";
      $root_cmd && print STDERR "(rootcmd is set to [$root_cmd]) ";
      print STDERR " are\n";  
      print STDERR "only valid for the buildpackage target. The target is:\n"; 
      print STDERR "[$argstring]\n"; 
      if ($root_cmd){
	print STDERR "Perhaps you would like \n";  
	print STDERR "% $root_cmd $main::MYNAME $argstring\n"; 
	print STDERR "instead? At the moment, I am ignoring $root_cmd\n";
      }
      print STDERR "Please hit return to continue\n";
      my $ans = <STDIN>;
    }
  }

  # Fine. Now we check targets.
  foreach $target (@ARGV){
    if ($Known_targets{$target}){
      $Targets .= "$target ";
    }
    else {
      $errors .= "Unknown target $target ";
    }
  }
  if ($errors){
    print STDERR "Error: $errors\n";
    print "$targets_help\n";
    exit 1;
  }
  # See if we are running in a linux kernel directory
  if (!(-d "drivers" && -d "kernel" && -d "fs" && -d "include/linux")){
    print STDERR <<EOERR;
We do not seem to be in a top level linux kernel source directory
tree. Since we are trying to make a kernel package, that does not make
sense.  Please change directory to an top level linux kernel source
directory, and try again. (If in case I am wrong, and this is indeed
a top level linux kernel source directory, then I have gotten sadly
out of date with current kernels, and you should upgrade kernel-package)
EOERR
  ;
    exit 1;
  }

  if (-f "stamp-debian" && -d "debian" && -x "debian/rules" && 
      ! -f "debian/official") {
    if ($Targets !~ /^debian|configure/o) {
      $rules_file = "debian/rules";
    }
  }

  if (!-x "$rules_file"){
    print STDERR <<EOERR1;
    Could not locate the rules file (Normally found at the location
 $rules_file), which would seem an
 impossibility. I give up. 
EOERR1
     ;
  }
  # Fine. Just do it!
  my $command = "$rules_file ";
  if ($signature){
    $command .= "  PGP_SIGNATURE=$signature ";
  } 
  if ($revision){
    $command .= " DEBIAN_REVISION=$revision ";

    if ($revision !~ m/^(\d+:)?[\w\.\+]+$/o)
      {
	print STDERR " Error: The revision string may only contain\n";
	print STDERR " alphanumerics and  the  characters  +  .\n";
	print STDERR " If epochs are used, the colon : is also allowed\n";
	print STDERR " The current value is: $revision\n";
	print STDERR " Aborting.\n";
	exit 1;
      }

    if (-f 'debian/changelog' && -f 'debian/official') {
      print STDERR "Warning: This appears to be an official package, \n"; 
      print STDERR "which is special in the sense that it supplies its\n"; 
      print STDERR "own details. The --revision options is ignored for\n"; 
      print STDERR "official packages. Please remove debian/official,\n"; 
      print STDERR "and run make-kpkg clean\n"; 
      print STDERR "(or, if you know what you are doing,  manually remove\n"; 
      print STDERR "stamp-debian, debian/changelog, debian/official, and\n"; 
      print STDERR " stamp-configure) for it to have an effect\n"; 
      print STDERR "Please hit return to continue\n";
      my $ans = <STDIN>;
    }
    if (-f 'stamp-configure'){
      print STDERR "Warning: The $revision option only has an effect during\n"; 
      print STDERR "the configure phase -- in other words, since the file\n"; 
      print STDERR "stamp-configure exists, this option has no effect \n"; 
      print STDERR "Also, this option has no effect when compiling the \n";
      print STDERR "any independent modules; the version from the last\n";
      print STDERR "make-kpkg run when you compiled the kernel-image shall\n";
      print STDERR "be used.\n";
      print STDERR "run make-kpkg clean or  if you know what you are doing,\n"; 
      print STDERR "manually remove stamp-debian, stamp-configure and \n"; 
      print STDERR "debian/changelog for it to have an effect\n"; 
      print STDERR "Please hit return to continue\n";
      my $ans = <STDIN>;
    }
  }
  if ($flavour){
    if ($flavour =~ m/[A-Z]+/o){
      print STDERR "Warning: Uppercase letters aredeprecated in";
      print STDERR "the flavour variable. I have $flavour";
    }
    $command .= " FLAVOUR=$flavour ";
  }
  if ($arch){
    $command .= " ARCH=$arch ";
  }
  if ($config_target ne 'oldconfig') {
    $command .= " CONFIG_TARGET=$config_target ";
  }  
  if ($cross_compile){
    $command .= " CROSS_COMPILE=$cross_compile ";
  }
  if ($subarch){
    $command .= " SUBARCH=$subarch ";
  }
  if ($added_modules) {
    $command .= " SELECTED_MODULES=\"$added_modules\"";
  }
  if ($added_patches) {
    $command .= " SELECTED_PATCHES=\"$added_patches\"";
  }
  if ($arch_in_name){
    $command .= " ARCH_IN_NAME=YES ";
  }
  if ($noexec){
    $command .= " -n ";
  }
  if ($root_cmd){
     $command .= " ROOT_CMD=$root_cmd ";
  }
  if ($unsign_changelog){
    $command .= " UNSIGN_CHANGELOG=YES ";
  }
  if ($unsign_source){
    $command .= " UNSIGN_SOURCE=YES ";
  }
  if ($zimage){
    $command .= " IMAGE_TYPE=zImage ";
  }
  elsif ($bzimage) {
    $command .= " IMAGE_TYPE=bzImage ";
  }

  my $hostcc = $ENV{'HOSTCC'};
  $hostcc =~ s/^\s+//g;
  $hostcc =~ s/\s+$//g;
  $hostcc .= " ";
  if ($hostcc eq " ") { $hostcc = "gcc"; };

  my $cc = $ENV{'CC'};
  $cc =~ s/^\s+//g;
  $cc =~ s/\s+$//g;
  $cc .= " ";
  if ($cc eq ' ') { $cc = $cross_compile; $cc .= "gcc "; };

  #$cc .= " -D__KERNEL__ -I";
  #chomp($cc .= `pwd`);
  #$cc .= "/include";

  # For some reason, this causes all modules to fail
  #$command .= " CC=\"$cc\" HOSTCC=\"$hostcc\"";
  $command .= " $Targets";
  # print STDERR $command; 
  exec $command; 
}

## Now just call main
&main();

=head1 FILES

Apart from the runtime options, the debian.rules file run by B<make-kpkg>
also looks for site-wide defaults in the file I</etc/kernel-pkg.conf>.
The default configuration allows there to be a site wide override for
the full name and email address of the person responsible for
maintaining the kernel packages on the site, but the
I</etc/kernel-pkg.conf> file is actually a I<Makefile> snippet, and any
legal make directives may be included in there.  B<Note>: Caution is
urged with this file, since you can totally change the way that the
make is run by suitable editing this file. Please look at
I</usr/share/doc/kernel-package/Problems.gz> for a list of known
problems while compiling kernel images.

=cut


=head1 B<SEE ALSO>

B<kernel-pkg.conf>(5), B<dpkg-deb>(1), B<dpkg-source>(1),  B<make>(1),
B<The GNU Make manual>, and the extensive documentation in the
directory I</usr/share/doc/kernel-package/>

=cut


=head1 BUGS

None Known so far.

=cut

=head1 AUTHOR

This  was  written by Manoj Srivastava <srivasta@debian.org>, for the
Debian GNU/Linux system. 

=cut


exit 0;
__END__
