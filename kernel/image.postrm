#! /usr/bin/perl
#                              -*- Mode: Perl -*- 
# image.postrm --- 
# Author           : Manoj Srivastava ( srivasta@glaurung.green-gryphon.com ) 
# Created On       : Sat May 15 11:05:13 1999
# Created On Node  : glaurung.green-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Fri Apr 12 14:43:25 2002
# Last Machine Used: glaurung.green-gryphon.com
# Update Count     : 25
# Status           : Unknown, Use with caution!
# HISTORY          : 
# Description      : 
# 
#     $Id: image.postrm,v 1.20 2002/04/12 20:03:33 srivasta Exp $
#


# 
#use strict; #for debugging

$|=1;
# Predefined values:
my $version         = "=V";
my $image_in_boot   = "=B";	# Should be empty, mostly
my $no_symlink      = "=S";	# Should be empty, mostly
my $reverse_symlink = "=R";	# Should be empty, mostly
my $do_symlink      = "Yes";	# target machine defined
my $do_boot_enable  = "Yes";	# target machine defined
my $do_bootfloppy   = "Yes";	# target machine defined
my $do_bootloader   = "Yes";	# target machine defined
my $move_image      = '';       # target machine defined
my $kimage          = "=K";	# Should be empty, mostly
my $loader          = "=L";     # lilo, silo, quik, palo, vmelilo, or nettrom
my $image_dir       = "=D";     # where the image is located
my $clobber_modules = '';       # target machine defined
my $initrd          = "=I";     # initrd kernel
my $do_initrd       = '';       # Normally, we don't
my $use_hard_links  = '';       # hardlinks do not work across fs boundaries
my $postinst_hook   = '';       #Normally we do not
my $postrm_hook     = '';       #Normally we do not
my $preinst_hook    = '';       #Normally we do not
my $prerm_hook      = '';       #Normally we do not
my $minimal_swap    = '';       # Do not swap symlinks

my $Loader          = "NoLOADER"; # 
$Loader             = "LILO"     if $loader =~ /^lilo/io;
$Loader             = "SILO"     if $loader =~ /^silo/io;
$Loader             = "QUIK"     if $loader =~ /^quik/io;
$Loader             = "yaboot"   if $loader =~ /^yaboot/io;
$Loader             = "PALO"     if $loader =~ /^palo/io;
$Loader             = "NETTROM"  if $loader =~ /^nettrom/io;
$Loader             = "VMELILO"  if $loader =~ /^vmelilo/io;
$Loader             = "ZIPL"     if $loader =~ /^zipl/io;
$Loader             = "ELILO"    if $loader =~ /^elilo/io;


# This should not point to /tmp, because of security risks.
my $temp_file_name = "/var/log/$loader" . "_log.$$";

#known variables
my @boilerplate     = ();
my @silotemplate    = ();
my @quiktemplate    = ();
my @palotemplate    = ();
my @vmelilotemplate = ();
my $bootdevice      = '';
my $rootdevice      = '';
my $rootdisk        = '';
my $rootpartition   = '';
my $image_dest      = "/";
my $realimageloc    = "/$image_dir/";
my $have_conffile   = "";
my $CONF_LOC        = '/etc/kernel-img.conf';
my $relative_links = '';
my $silent_modules  = '';
my $silent_loader   = '';

# remove multiple leading slashes; make sure there is at least one.
$realimageloc  =~ s|^/*|/|o;
$realimageloc  =~ s|/+|/|o;

# most of our work is done in $image_dir
chdir("$image_dir") or die "could not chdir to $image_dir:$!\n";

if (-r "$CONF_LOC" && -f "$CONF_LOC"  ) {
  if (open(CONF, "$CONF_LOC")) {
    while (<CONF>) {
      chomp;
      s/\#.*$//g;
      next if /^\s*$/;

      $do_symlink      = "" if /do_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $no_symlink      = "" if /no_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $reverse_symlink = "" if /reverse_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $image_in_boot   = "" if /image_in_boot\s*=\s*(no|false|0)\s*$/ig;
      $move_image      = "" if /move_image\s*=\s*(no|false|0)\s*$/ig;
      $clobber_modules = '' if /clobber_modules\s*=\s*(no|false|0)\s*$/ig;
      $do_boot_enable  = '' if /do_boot_enable\s*=\s*(no|false|0)\s*$/ig;
      $do_bootfloppy   = '' if /do_bootfloppy\s*=\s*(no|false|0)\s*$/ig;
      $relative_links  = '' if /relative_links \s*=\s*(no|false|0)\s*$/ig;
      $do_bootloader   = '' if /do_bootloader\s*=\s*(no|false|0)\s*$/ig;
      $do_initrd       = '' if /do_initrd\s*=\s*(no|false|0)\s*$/ig;
      $use_hard_links  = '' if /use_hard_links\s*=\s*(no|false|0)\s*$/ig;
      $silent_modules  = '' if /silent_modules\s*=\s*(no|false|0)\s*$/ig;
      $silent_loader   = '' if /silent_loader\s*=\s*(no|false|0)\s*$/ig;
      $minimal_swap    = '' if /minimal_swap\s*=\s*(no|false|0)\s*$/ig;


      $do_symlink      = "Yes" if /do_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $no_symlink      = "Yes" if /no_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $reverse_symlink = "Yes" if /reverse_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $image_in_boot   = "Yes" if /image_in_boot\s*=\s*(yes|true|1)\s*$/ig;
      $move_image      = "Yes" if /move_image\s*=\s*(yes|true|1)\s*$/ig;
      $clobber_modules = "Yes" if /clobber_modules\s*=\s*(yes|true|1)\s*$/ig;
      $do_boot_enable  = "Yes" if /do_boot_enable\s*=\s*(yes|true|1)\s*$/ig;
      $do_bootfloppy   = "Yes" if /do_bootfloppy\s*=\s*(yes|true|1)\s*$/ig;
      $do_bootloader   = "Yes" if /do_bootloader\s*=\s*(yes|true|1)\s*$/ig;
      $relative_links  = "Yes" if /relative_links\s*=\s*(yes|true|1)\s*$/ig;
      $do_initrd       = "Yes" if /do_initrd\s*=\s*(yes|true|1)\s*$/ig;
      $use_hard_links  = "Yes" if /use_hard_links\s*=\s*(yes|true|1)\s*$/ig;
      $silent_modules  = 'Yes' if /silent_modules\s*=\s*(yes|true|1)\s*$/ig;
      $silent_loader   = 'Yes' if /silent_loader\s*=\s*(yes|true|1)\s*$/ig;
      $minimal_swap    = 'Yes' if /minimal_swap\s*=\s*(yes|true|1)\s*$/ig;

      $image_dest      = "$1"  if /image_dest\s*=\s*(\S+)/ig;
      $postinst_hook   = "$1"  if /postinst_hook\s*=\s*(\S+)/ig;
      $postrm_hook     = "$1"  if /postrm_hook\s*=\s*(\S+)/ig;
      $preinst_hook    = "$1"  if /preinst_hook\s*=\s*(\S+)/ig;
      $prerm_hook      = "$1"  if /prerm_hook\s*=\s*(\S+)/ig;
    }
    close CONF;
    $have_conffile = "Yes";
  }
}

if ($image_in_boot) {$image_dest = "/$image_dir/"; $image_dest =~ s|^/*|/|o; }

# Paranoid check to make sure that the correct value is put in there
if (! $kimage)                    {$kimage = "vmlinuz"} # Hmm. empty
elsif ($kimage =~ m/^b?zImage$/o) {$kimage = "vmlinuz"} # these produce vmlinuz
elsif ($kimage =~ m/^[iI]mage$/o) { my $nop = $kimage;}
elsif ($kimage =~ m/^vmlinux$/o)  { my $nop = $kimage;}
else                              {$kimage = "vmlinuz"} # default

######################################################################
######################################################################
############
######################################################################
######################################################################
sub remove_sym_link {
  my $bad_image = $_[0];

  warn "Removing symbolic link $bad_image \n";
  warn "Unless you used the optional flag in lilo, you may  \n";
  warn " need to re-run $loader\n";
  # Remove the dangling link
  unlink "$bad_image";
}

######################################################################
######################################################################
############
######################################################################
######################################################################
sub CanonicalizePath {
  my $path = join '/', @_;
  my @work = split '/', $path;
  my @out;
  my $is_absolute;

  if (@work && $work[0] eq "") { $is_absolute = 1; shift @work; }

  while (@work) {
    my $seg = shift @work;
    if ($seg eq "." || $seg eq "") {
    } elsif ($seg eq "..") {
      if (@out && $out[-1] ne "..") {
        pop @out;
      } else {
        # Leading "..", or "../..", etc.
        push @out, $seg;
      }
    } else {
      push @out, $seg;
    }
  }

  unshift @out, "" if $is_absolute;
  return join('/', @out);
}

######################################################################
######################################################################
############
######################################################################
######################################################################
# This removes dangling symlinks. What do we do about hard links? Surely a 
# something with the nane $image_dest . "$kimage" ought not to be left behind? 
sub image_magic {
  my $kimage = $_[0];
  my $image_dest = $_[1];

  if (-l $image_dest . "$kimage") {
    # There is a symbolic link
    my $force_move = 0;
    my $vmlinuz_target = readlink $image_dest . "$kimage";
    if (!defined($vmlinuz_target)) {
      # what, a dangling symlink?
      warn "The link "  . $image_dest . "$kimage is a damaged link\n";
      # Remove the dangling link
      &remove_sym_link("$image_dest" . "$kimage");
    }
    else {
      my $canonical_target = CanonicalizePath("$image_dest" . 
					      "$vmlinuz_target");
      if (! -e $canonical_target) {
	warn "The link "  . $image_dest . "$kimage is a dangling link\n";
	&remove_sym_link("$image_dest" . "$kimage");
      }
    }
  }
}

## Run user hook script here, if any
if (-x "$postrm_hook") {
  system ("$postrm_hook", $version, $realimageloc . "$kimage-$version") &&
	    warn "User hook script $postrm_hook failed";
}

# Ignore all invocations uxcept when called on to purge.
exit 0 unless $ARGV[0] =~ /purge/;

# check and remove damaged and dangling symlinks
image_magic($kimage,          $image_dest);
image_magic($kimage . ".old", $image_dest);
image_magic("initrd.img",     $realimageloc) if $initrd;
image_magic("initrd.img.old", $realimageloc) if $initrd;

if (-f "/lib/modules/$version/modules.dep") {
  unlink "/lib/modules/$version/modules.dep";
}
if (-f "/lib/modules/$version/modules.isapnpmap") {
  unlink "/lib/modules/$version/modules.isapnpmap";
}
if (-f "/lib/modules/$version/modules.pcimap") {
  unlink "/lib/modules/$version/modules.pcimap";
}
if (-f "/lib/modules/$version/modules.usbmap") {
  unlink "/lib/modules/$version/modules.usbmap";
}

if (-f $realimageloc . "initrd.img-$version") {
  unlink $realimageloc . "initrd.img-$version";
}
if (-f "/lib/modules/$version/modules.parportmap") {
  unlink "/lib/modules/$version/modules.parportmap";
}
if (-f "/lib/modules/$version/modules.generic_string") {
  unlink "/lib/modules/$version/modules.generic_string";
}
if (-f "/lib/modules/$version/modules.ieee1394map") {
  unlink "/lib/modules/$version/modules.ieee1394map";
}

if (-d "/lib/modules/$version" ) {
  system ("rmdir", "/lib/modules/$version");
}

exit 0;

__END__






