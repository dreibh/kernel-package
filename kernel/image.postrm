#! /usr/bin/perl
#                              -*- Mode: Perl -*- 
# image.postrm --- 
# Author           : Manoj Srivastava ( srivasta@glaurung.green-gryphon.com ) 
# Created On       : Sat May 15 11:05:13 1999
# Created On Node  : glaurung.green-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Wed Jul  4 13:03:32 2001
# Last Machine Used: glaurung.green-gryphon.com
# Update Count     : 17
# Status           : Unknown, Use with caution!
# HISTORY          : 
# Description      : 
# 
#     $Id: image.postrm,v 1.8 2001/07/05 04:21:26 srivasta Exp $
#


# 
# use strict; #for debugging
$|=1;
# Predefined values:
my $version         = "=V";
my $image_in_boot   = "=B";	# Should be empty, mostly
my $no_symlink      = "=S";	# Should be empty, mostly
my $reverse_symlink = "=R";	# Should be empty, mostly
my $do_symlinks     = "Yes";	# target machine defined
my $do_boot_enable  = "Yes";	# target machine defined
my $do_bootfloppy   = "Yes";	# target machine defined
my $do_bootloader   = "Yes";	# target machine defined
my $move_image      = '';       # target machine defined
my $kimage          = "=K";	# Should be empty, mostly
my $loader          = "=L";     # lilo, silo, quik, or nettrom
my $image_dir       = "=D";     # where the image is located
my $clobber_modules = '';       # target machine defined
my $initrd          = "=I";     # initrd kernel

my $Loader          = "LILO";
$Loader             = "SILO"  if $loader =~ /silo/io;
$Loader             = "QUIK"  if $loader =~ /quik/io;
$Loader             = "NETTROM"  if $loader =~ /nettrom/io;

if (! $image_dest) {
  $image_dest         = "boot"  
}
else {
  $image_dest  =~ s|^/||o;
}


# This should not point to /tmp, because of security risks.
my $temp_file_name = "/var/log/$loader" . "_log.$$";

#known variables
my @boilerplate = ();
my $bootdevice = '';
my $rootdevice = '';
my $rootdisk = '';
my $rootpartition = '';
my $image_dest      = "/";
my $realimageloc  = "/$image_dir/";
my $have_conffile = "";
my $CONF_LOC      = '/etc/kernel-img.conf';

# remove multiple leading slashes; make sure there is at least one.
$realimageloc  =~ s|^/*|/|o;
$realimageloc  =~ s|/+|/|o;

# Ignore all invocations uxcept when called on to purge.
exit 0 unless $ARGV[0] =~ /purge/;

# most of our work is done in $imagedir
chdir("$imagedir") or die "could not chdir to $imagedir:$!\n";

if (-r "$CONF_LOC" && -f "$CONF_LOC"  ) {
  if (open(CONF, "$CONF_LOC")) {
    while (<CONF>) {
      chomp;
      s/\#.*$//g;
      next if /^\s*$/;

      $do_symlink      = "" if /do_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $no_symlink      = "" if /no_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $reverse_symlink = "" if /reverse_symlinks\s*=\s*(no|false|0)\s*$/ig;
      $image_in_boot   = "" if /image_in_boot\s*=\s*(no|false|0)\s*$/ig;
      $move_image      = "" if /move_image\s*=\s*(no|false|0)\s*$/ig;
      $clobber_modules = '' if /clobber_modules\s*=\s*(no|false|0)\s*$/ig;
      $do_boot_enable  = '' if /do_boot_enable\s*=\s*(no|false|0)\s*$/ig;
      $do_bootfloppy   = '' if /do_bootfloppy\s*=\s*(no|false|0)\s*$/ig;
      $do_bootloader   = '' if /do_bootloader\s*=\s*(no|false|0)\s*$/ig;


      $do_symlink      = "Yes" if /do_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $no_symlink      = "Yes" if /no_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $reverse_symlink = "Yes" if /reverse_symlinks\s*=\s*(yes|true|1)\s*$/ig;
      $image_in_boot   = "Yes" if /image_in_boot\s*=\s*(yes|true|1)\s*$/ig;
      $move_image      = "Yes" if /move_image\s*=\s*(yes|true|1)\s*$/ig;
      $clobber_modules = "Yes" if /clobber_modules\s*=\s*(yes|true|1)\s*$/ig;
      $do_boot_enable  = "Yes" if /do_boot_enable\s*=\s*(yes|true|1)\s*$/ig;
      $do_bootfloppy   = "Yes" if /do_bootfloppy\s*=\s*(yes|true|1)\s*$/ig;
      $do_bootloader   = "Yes" if /do_bootloader\s*=\s*(yes|true|1)\s*$/ig;

      $image_dest      = "$1"  if /image_dest\s*=\s*(\S+)/ig;
      $postinst_hook   = "$1"  if /postinst_hook\s*=\s*(\S+)/ig;
      $postrm_hook     = "$1"  if /postrm_hook\s*=\s*(\S+)/ig;
    }
    close CONF;
    $have_conffile = "Yes";
  }
}

if ($image_in_boot) {$image_dest = "/$image_dir/"; $image_dest =~ s|^/*|/|o; }

# Paranoid check to make sure that the correct value is put in there
if (! $kimage)                    {$kimage = "vmlinuz"} # Hmm. empty
elsif ($kimage =~ m/^b?zImage$/o) {$kimage = "vmlinuz"} # these produce vmlinuz
elsif ($kimage =~ m/^Image$/o)    { my $nop = $kimage;}
elsif ($kimage =~ m/^vmlinux$/o)  { my $nop = $kimage;}
else                              {$kimage = "vmlinuz"} # default

sub image_magic {
  my $kimage = $_[0];
  my $image_dest = $_[1];

  if (-l $image_dest . "$kimage") {
    # There is a symbolic link
    my $force_move = 0;
    my $vmlinuz_target = readlink $image_dest . "$kimage";
    if (!defined($vmlinuz_target)) {
      # what, a dangling symlink?
      warn "The link "  . $image_dest . "$kimage is a dangling link\n";
      warn "Removing dangling sym link "  . $imagedir . "$kimage \n";
      warn "Unless you used the optional flag in lilo, you may  \n";
      warn " need to re-run lilo\n";
      # Remove the dangling link
      unlink $image_dest . $kimage;
    }
  }
  if (-l $image_dest . "$kimage.old") {
    # There is a symbolic link
    my $force_move = 0;
    my $vmlinuz_target = readlink $image_dest . "$kimage" . ".old" ;
    if (!defined($vmlinuz_target)) {
      # what, a dangling symlink?
      warn "The link "  . $image_dest . "$kimage" . ".old is a dangling link\n";
      warn "Removing dangling sym link "  . $image_dest . "$kimage" . ".old \n";
      warn "Unless you used the optional flag in lilo, you may  \n";
      warn " need to re-run lilo\n";
      # Remove the dangling link
      unlink $image_dest . $kimage . ".old";
    }
  }
}

image_magic($kimage, $image_dest);
image_magic("initrd", $realimageloc) if $initrd;

if (-f "/lib/modules/$version/modules.dep") {
  unlink "/lib/modules/$version/modules.dep";
}
if (-f "/lib/modules/$version/modules.isapnpmap") {
  unlink "/lib/modules/$version/modules.isapnpmap";
}
if (-f "/lib/modules/$version/modules.pcimap") {
  unlink "/lib/modules/$version/modules.pcimap";
}
if (-f "/lib/modules/$version/modules.usbmap") {
  unlink "/lib/modules/$version/modules.usbmap";
}

if (-f $realimageloc . "initrd-$version") {
  unlink $realimageloc . "initrd-$version";
}
if (-f "/lib/modules/$version/modules.parportmap") {
  unlink "/lib/modules/$version/modules.parportmap";
}
if (-f "/lib/modules/$version/modules.generic_string") {
  unlink "/lib/modules/$version/modules.generic_string";
}

## Run user hook script here, if any
if (-x "$postrm_hook") {
  system ("$postrm_hook", $version, $realimageloc . "$kimage-$version") &&
	    warn "User hook script $postrm_hook failed";
}

if (-d "/lib/modules/$version" ) {
  system ("rmdir", "/lib/modules/$version");
}

exit 0;

__END__






