#! /usr/bin/perl
#                              -*- Mode: Perl -*- 
# image.prerm --- 
# Author           : root ( root@melkor.pilgrim.umass.edu ) 
# Created On       : Fri May 17 03:28:59 1996
# Created On Node  : melkor.pilgrim.umass.edu
# Last Modified By : Manoj Srivastava
# Last Modified On : Sun Jul  9 18:00:03 2000
# Last Machine Used: glaurung.green-gryphon.com
# Update Count     : 63
# Status           : Unknown, Use with caution!
# HISTORY          : 
# Description      : 
# 
#
#    $Id: image.prerm,v 1.9 2000/07/10 06:25:19 srivasta Exp $
#
# 

$|=1;
# Predefined values:
my $version         = "=V";
my $image_in_boot   = "=B";	# Should be empty, mostly
my $no_symlink      = "=S";	# Should be empty, mostly
my $reverse_symlink = "=R";	# Should be empty, mostly
my $do_symlinks     = "Yes";	# target machine defined
my $do_boot_enable  = "Yes";	# target machine defined
my $do_bootfloppy   = "Yes";	# target machine defined
my $do_bootloader   = "Yes";	# target machine defined
my $move_image      = '';       # target machine defined
my $kimage          = "=K";	# Should be empty, mostly
my $loader          = "=L";     # lilo, silo, quik, or nettrom
my $image_dir       = "=D";     # where the image is located
my $clobber_modules = '';       # target machine defined

my $Loader          = "LILO";
$Loader             = "SILO"  if $loader =~ /silo/io;
$Loader             = "QUIK"  if $loader =~ /quik/io;
$Loader             = "NETTROM"  if $loader =~ /nettrom/io;



# This should not point to /tmp, because of security risks.
my $temp_file_name = "/var/log/$loader" . "_log.$$";

#known variables
my @boilerplate   = ();
my $bootdevice    = '';
my $rootdevice    = '';
my $rootdisk      = '';
my $rootpartition = '';
my $image_dest      = "/";
my $realimageloc  = "/$image_dir/";
my $have_conffile = "";
my $CONF_LOC      = '/etc/kernel-img.conf';


# Variables used
my $image='';
my $answer='';
my $running = '';
my $WouldInvalidate = 0;

if ($ARGV[0] && ($ARGV[0] =~ /remove/ || $ARGV[0] =~ /upgrade/)) {
  if (-l "/usr/doc/kernel-image-$version") {
    unlink "/usr/doc/kernel-image-$version";
  }
}

# Ignore all invocations uxcept when called on to remove
exit 0 unless ($ARGV[0] && $ARGV[0] =~ /remove/) ;

# Paranoid check to make sure that the correct value is put in there
if (! $kimage)                    { $kimage = "vmlinuz";} # Hmm. empty
elsif ($kimage =~ m/^b?zImage$/o) { $kimage = "vmlinuz";} # these produce vmlinuz
elsif ($kimage =~ m/^Image$/o)    { my $nop = $kimage;  }
elsif ($kimage =~ m/^vmlinux$/o)  { my $nop = $kimage;  }
else                              { $kimage = "vmlinuz";} # Default

#check to see if we are trying to remove a running kernel
# if so we abort right now.
chop($running=`uname -r`);
if ($running eq $version) {
  print STDERR <<"EOFERR";

  You are running a kernel (version $running) and attempting to remove
  the same version. This is a potentially disastrous action. Not only
  will /boot/vmlinuz-$running be removed, making it impossible to boot
  it, (you will have to take action to change your boot loader to boot
  a new kernel), it will also remove all modules under the directory 
  /lib/modules/$running. Just having a copy of the kernel image is not
  enough, you will have to replace the modules too.

    I repeat, this is very dangerous. If at all in doubt, answer
    no. If you know exactly what you are doing, and are prepared to
    hose your system, then answer Yes.
EOFERR
  
  my $done = 0;
  while (!$done) {
    print "Remove the running kernel image (not recommended) [No]? ";
    $answer=<STDIN>;
    if ($answer !~ /^\s*[Yy]/o) {
      exit 1; #Operation not permitted
    }
    if ($answer =~ /yes/io) {
      $done = 1;
      print "Ok, proceeding with removing running kernel image.\n";
      last;
    }
    print "Please answer yes or no.\n\n";
    $done = 0;
  }
}

#Now, they have an alternate kernel which they are currently running
# The rest is just us being nice to lilo users.

chdir("/") or die "could not chdir to /:$!\n";

if (-f "/etc/$loader.conf") { #I know, could be a link, but ..
  open (LILO, "/etc/$loader.conf") || &success(); # this is not critical
  while (<LILO>) {
    chop;
    s/\#.*//;			  # nix the comments
    next unless /^\s*image\s*=\s(\S+)/o;
    $image = $1;
    if ($image && -e $image) {
      while (defined($image) && -l $image) {
	$image = readlink ($image);
      }
      if (defined($image) && -e $image) {
	$WouldInvalidate |= $image =~ /$kimage-$version/;
      }
      else {
	&success(); # invalid $loader.conf file
      }
    }
    else {
      &success(); # invalid $loader.conf file
    }
  }
  close (LILO);
  if ($WouldInvalidate) {
    print STDERR <<"EOF";

 You have a valid /etc/$loader.conf file that mentions
 $kimage-$version.  Removing kernel-image-$version would invalidate
 that file. (you will have to edit /etc/$loader.conf or re-target
 symbolic links mentioned there (typically, /vmlinuz and /vmlinuz.old)
 to not refer to $kimage-$version and will have to re-run $loader). 

 I repeat: you shall have to make changes to your boot loader setup
 and will have to re-run $loader.

EOF
  ;
    if (&ask("Are you sure you want to remove kernel-image-$version")) {
      print STDERR <<"EOG";

Remember to edit /etc/$loader.conf and re-run $loader, or Make other
arrangements to boot your machine.

EOG
;
      &success();
    }
    else {
      print STDERR "\nNot removing kernel-image-$version.\n";
      exit 1;
    }
  }
}

sub success () {
    -f "/lib/modules/$version/modules.dep"  && 
      unlink "/lib/modules/$version/modules.dep";
    exit 0;
}

sub ask {
    print @_,"? [Yes] ";
    $answer=<STDIN>;
    return ( $answer !~ /^[Nn].*/ );
}

&success();
exit 0;
__END__





