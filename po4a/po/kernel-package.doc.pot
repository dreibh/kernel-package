# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2008-10-12 22:25-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING"

# type: TH
#: kernel-img.conf.5:26
#, no-wrap
msgid "KERNEL-IMG.CONF"
msgstr ""

# type: TH
#: kernel-img.conf.5:26
#, no-wrap
msgid "Mar 21 2000"
msgstr ""

# type: TH
#: kernel-img.conf.5:26 kernel-package.5:26 kernel-packageconfig.8:27 kernel-pkg.conf.5:26 make-kpkg.8:27
#, no-wrap
msgid "Debian"
msgstr ""

# type: TH
#: kernel-img.conf.5:26 kernel-package.5:26 kernel-packageconfig.8:27 kernel-pkg.conf.5:26 make-kpkg.8:27
#, no-wrap
msgid "Debian GNU/Linux manual"
msgstr ""

# type: SH
#: kernel-img.conf.5:29 kernel-package.5:29 kernel-packageconfig.8:28 kernel-pkg.conf.5:29 make-kpkg.8:28
#, no-wrap
msgid "NAME"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:31
msgid "kernel-img.conf - site wide configuration file for kernel image packages"
msgstr ""

# type: SH
#: kernel-img.conf.5:31 kernel-packageconfig.8:30 kernel-pkg.conf.5:31 make-kpkg.8:30
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:33
msgid "I</etc/kernel-img.conf>"
msgstr ""

# type: SH
#: kernel-img.conf.5:33 kernel-package.5:31 kernel-packageconfig.8:32 kernel-pkg.conf.5:35 make-kpkg.8:34
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:39
msgid ""
"The file I</etc/kernel-img.conf> is a simple file looked at by the kernel "
"image post installation process to allow local options for handling some "
"aspects of the installation, overriding the defaults built into the image "
"itself."
msgstr ""

# type: Plain text
#: kernel-img.conf.5:53
msgid ""
"The format of the file is a simple B<VAR = VALUE> pair. Boolean values may "
"be specified as I<Yes, True, 1,> and I<No, False, 0,> and are case "
"insensitive.  This file is automatically created by the installation script "
"if it does not exist, and neither does the symbolic link I</vmlinuz.> The "
"script asks the user whether the symbolic link should be created, and "
"stashes the answer into I</etc/kernel-img.conf>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:55 kernel-pkg.conf.5:56
msgid "At the moment, the user modifiable variables supported are:"
msgstr ""

# type: TP
#: kernel-img.conf.5:55 kernel-pkg.conf.5:108
#, no-wrap
msgid "B<link_in_boot>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:64
msgid ""
"Set to Yes if you want the symbolic link to the kernel image, namely, "
"I<vmlinuz> in I</boot> rather than the default I</.> Defaults to No."
msgstr ""

# type: TP
#: kernel-img.conf.5:64
#, no-wrap
msgid "B<do_symlinks>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:83
msgid ""
"By default, the kernel image post installation script shall create or update "
"the I</vmlinuz> and I</vmlinuz.old> symbolic links. This is true if a "
"I</vmlinuz> link already exists, however, in absence of I</vmlinuz,> the "
"script looks to see if this configuration file exists. If it does not, the "
"configuration script asks the user whether to create the symbolic link, and "
"stashes the answer in a newly created I</etc/kernel-img.conf.> If the "
"configuration file already exists, and if this option is set to No, no "
"symbolic link is ever created. This for people who have other means of "
"booting their machines, and do not like the symbolic links cluttering up "
"their / directory.  Defaults to Yes."
msgstr ""

# type: TP
#: kernel-img.conf.5:83
#, no-wrap
msgid "B<minimal_swap>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:94
msgid ""
"By default, if the /vmlinuz symbolic link does not point to an image which "
"is the same as the image being installed, the postinst moves /vmlinuz to "
"/vmlinuz.old, and creates a symbolic link to the kernel image in /vmlinuz "
"(the exception is to prevent both /vmlinuz and /vmlinuz.old from pointing to "
"the current kernel image -- potentially disastrous if the current image is "
"defective or lacking in any way). However, if this option is enabled, no "
"action is taken if /vmlinuz.old points to the currently installed image (by "
"default, the symbolic links are swapped).  Defaults to no."
msgstr ""

# type: TP
#: kernel-img.conf.5:94 kernel-pkg.conf.5:134
#, no-wrap
msgid "B<no_symlinks>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:114
msgid ""
"Whether to use symlinks to the I<image> file.  Mutually exclusive to "
"I<reverse_symlinks.> Can be used with I<link_in_boot.> If set to Yes, the "
"real image is placed in vmlinuz (instead of /boot/vmlinuz-X.X.XX). If you "
"use link_in_boot in conjunction with this, /boot/vmlinuz-X.X.XX is moved to "
"/boot/vmlinuz.  The old vmlinuz is moved to vmlinuz.old "
"unconditionally. (Normally, that is only done if the version of the new "
"image differs from the old one). This restricts you to two images, unless "
"you take additional action and save copies of older images. This is for "
"people who have I</boot> on a system that does not use symbolic links (and "
"say, they use loadlin as a bootloader). This is a Hack.  Defaults to No."
msgstr ""

# type: TP
#: kernel-img.conf.5:114 kernel-pkg.conf.5:153
#, no-wrap
msgid "B<reverse_symlinks>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:136
msgid ""
"Whether to use reverse symlinks (that is, the real file is the one without "
"the version number, and the number version is the link) to the I<image> "
"file.  Mutually exclusive to I<no_symlinks.> Can be used with "
"I<link_in_boot.> Just like I<no_symlinks,> except that the "
"/boot/vmlinuz-X.XX is a symbolic link to the real new image, vmlinuz. This, "
"too, restricts you to just two images unless further action is taken. The "
"older symlinks are left dangling. This is for people with I</boot> on "
"umsdos, and who can't see the link in dos, but do want to know the image "
"version when in Linux.  This is a Hack.  Defaults to No."
msgstr ""

# type: TP
#: kernel-img.conf.5:136
#, no-wrap
msgid "B<image_dest>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:159
msgid ""
"If you want the symbolic link (or image, if B<move_image> is set) to be "
"stored elsewhere than I</> set this variable to the dir where you want the "
"symbolic link.  Please note that this is not a boolean variable.  This may "
"be of help to B<loadlin> users, who may set both this and B<move_image> "
"Defaults to I</.> This can be used in conjunction with all above options "
"except B<link_in_boot,> which would not make sense. (If both B<image_dest> "
"and B<link_in_boot> are set, B<link_in_boot> overrides)"
msgstr ""

# type: TP
#: kernel-img.conf.5:159
#, no-wrap
msgid "B<postinst_hook>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:183
msgid ""
"Set this variable to a script to be executed during installation after all "
"the symbolic links are created, but before running the bootloader. The path "
"can be a relative path if the script lives in a safe path -- that is, if it "
"lives in /bin, /sbin, /usr/bin, or /usr/sbin, or must be an absolute path "
"instead. Before calling this script, the env variable B<STEM> shall be set "
"to the value of the I<--stem> argument (or the default value, linux). This "
"script shall be called with two arguments, the first being the I<version> of "
"the kernel image, and the second argument being the I<location> of the "
"kernel image itself. Errors in the script shall cause the postinst to "
"fail. Since debconf is in use before the script is called, this script "
"should issue no diagnostic messages to stdout -- while the postinst does "
"call B<db_stop> , debconf does not restore stdout, so messages to stdout "
"disappear.  An example script for grub users is present in "
"/usr/share/doc/kernel-package/ directory."
msgstr ""

# type: TP
#: kernel-img.conf.5:183
#, no-wrap
msgid "B<postrm_hook>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:200
msgid ""
"Set this variable to a script to be executed in the postrm (that is, after "
"the image has been removed) after all the remove actions have been "
"performed. The path can be a relative path if the script lives in a safe "
"path -- that is, if it lives in /bin, /sbin, /usr/bin, or /usr/sbin, or must "
"be an absolute path instead. This script shall be called with two arguments, "
"the first being the I<version> of the kernel image, and the second argument "
"being the I<location> of the kernel image itself. Errors in the script shall "
"produce a warning message, but shall be otherwise ignored. Since debconf is "
"in use before the script is called, this script should issue no diagnostic "
"messages to stdout -- while the postinst does call B<db_stop> , debconf does "
"not restore stdout, so messages to stdout disappear."
msgstr ""

# type: TP
#: kernel-img.conf.5:200
#, no-wrap
msgid "B<preinst_hook>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:212
msgid ""
"Set this variable to a script to be executed before the package is unpacked, "
"and can be used to put in additional checks. The path can be a relative path "
"if the script lives in a safe path -- that is, if it lives in /bin, /sbin, "
"/usr/bin, or /usr/sbin, or must be an absolute path instead. This script "
"shall be called with two arguments, the first being the I<version> of the "
"kernel image, and the second argument being the I<location> of the kernel "
"image itself."
msgstr ""

# type: TP
#: kernel-img.conf.5:212
#, no-wrap
msgid "B<prerm_hook>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:229
msgid ""
"Set this variable to a script to be executed before the package files are "
"removed (so any added files may be removed) . The path can be a relative "
"path if the script lives in a safe path -- that is, if it lives in /bin, "
"/sbin, /usr/bin, or /usr/sbin, or must be an absolute path instead. This "
"script shall be called with two arguments, the first being the I<version> of "
"the kernel image, and the second argument being the I<location> of the "
"kernel image itself. Errors in the script shall cause the prerm to "
"fail. Since debconf is in use before the script is called, this script "
"should issue no diagnostic messages to stdout -- while the postinst does "
"call B<db_stop> , debconf does not restore stdout, so messages to stdout "
"disappear."
msgstr ""

# type: TP
#: kernel-img.conf.5:229
#, no-wrap
msgid "B<ramdisk>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:247
msgid ""
"Set this variable to a space separated list of executables that create an "
"initial RAM disk. This only has any effect if installing a kernel-image that "
"uses an initial RAM disk. The commands so pointed must be drop-in compatible "
"with I<mkinitrd.> Using the command line options I<--supported-host-version> "
"and I<--supported-target-version,> these executables are queried at "
"installation time to see if the combination of the currently running kernel "
"as host kernel, and the kernel version being installed as the target kernel, "
"and removed from the list if not.  The first viable tool is used to create "
"the actual initial RAM disk. The install shall fail if no suitable tool is "
"found.  Defaults to a subset of I<mkinitrd mkinitrd.yaird mkinitramfs>"
msgstr ""

# type: TP
#: kernel-img.conf.5:247
#, no-wrap
msgid "B<src_postinst_hook>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:263
msgid ""
"Unlike the other hook variables, this is meant for a script run during the "
"post inst of a docs, headers or a source package. Using this hook for the "
"headers package is now being deprecated, at some point the headers post "
"install script shall only run the header_postinst_hook.  The path can be a "
"relative path if the script lives in a safe path -- that is, if it lives in "
"/bin, /sbin, /usr/bin, or /usr/sbin, or must be an absolute path "
"instead. This script shall be called with two arguments, the first being the "
"I<name> of the package being installed (could be kernel-source-X.X.XX or "
"kernel-headers-X.X.XX), and the second argument being the I<version> of the "
"package being installed. Errors in the script shall cause the postinst to "
"fail."
msgstr ""

# type: TP
#: kernel-img.conf.5:263
#, no-wrap
msgid "B<headers_postinst_hook>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:276
msgid ""
"Unlike the other hook variables, this is meant for a script run during the "
"post inst of a headers package only. The path can be a relative path if the "
"script lives in a safe path -- that is, if it lives in /bin, /sbin, "
"/usr/bin, or /usr/sbin, or must be an absolute path instead. This script "
"shall be called with two arguments, the first being the I<name> of the "
"package being installed (kernel-headers-X.X.XX), and the second argument "
"being the I<version> of the package being installed. Errors in the script "
"shall cause the postinst to fail."
msgstr ""

# type: TP
#: kernel-img.conf.5:276
#, no-wrap
msgid "B<move_image>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:294
msgid ""
"Instead of creating symbolic links to (or, if B<reverse_symlinks> is set, "
"from)  B<image_dest,> the image is moved from its location in I</boot> into "
"B<image_dest.> If B<reverse_symlinks> is set, I</boot> shall contain a "
"symbolic link to the actual image.  This option can be useful to people "
"using loadlin, who may need the image to be moved to a different, dos "
"partition.  This variable is unset by default."
msgstr ""

# type: TP
#: kernel-img.conf.5:294
#, no-wrap
msgid "B<clobber_modules>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:300
msgid ""
"If set, the preinst shall silently try to move /lib/modules/version out of "
"the way if it is the same version as the image being installed. Use at your "
"own risk.  This variable is unset by default."
msgstr ""

# type: TP
#: kernel-img.conf.5:300
#, no-wrap
msgid "B<warn_reboot>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:310
msgid ""
"This variable can be used to turn off the warning given when installing a "
"kernel image which is the same version as the currently running version. If "
"the modules list is changed, the modules dependencies may have been changed, "
"and the modules for the new kernel may not run correctly on the running "
"kernel if the kernel ABI has changed in the meanwhile. It is a good idea to "
"reboot, and this is a note to remind you. If you know what you are doing, "
"you can set this variable to no. This variable is set by default."
msgstr ""

# type: TP
#: kernel-img.conf.5:310
#, no-wrap
msgid "B<do_bootloader>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:314
msgid ""
"If set to NO, this prevents the postinst from running the boot loader.  "
"Defaults to Yes."
msgstr ""

# type: TP
#: kernel-img.conf.5:314
#, no-wrap
msgid "B<relative_links>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:320
msgid ""
"If set to yes, the kernel image postinst script shall go to extra ordinary "
"lengths to ensure that the symbolic links are relative. Normally, the "
"symbolic links are relative when it is easily determinable that relative "
"links shall work. Defaults to No."
msgstr ""

# type: TP
#: kernel-img.conf.5:320
#, no-wrap
msgid "B<do_initrd>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:330
msgid ""
"Set to YES to prevent the I<kernel-image> post installation script from "
"issuing a warning when installing an initrd kernel. This assumes you have "
"correctly set up your boot loader to be able to boot the initrd "
"image. Default: no. This is deprecated in favor of the more descriptive "
"B<warn_initrd> option (please note that the sense of the option is "
"inverted)."
msgstr ""

# type: TP
#: kernel-img.conf.5:330
#, no-wrap
msgid "B<warn_initrd>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:341
msgid ""
"Set to NO to prevent the I<kernel-image> post installation script from "
"issuing a warning when installing an initrd kernel. This assumes you have "
"correctly set up your boot loader to be able to boot the initrd image. This "
"is now preferred to B<do_initrd,> since I<warnings> are what are "
"prevented. Default: YES"
msgstr ""

# type: TP
#: kernel-img.conf.5:341
#, no-wrap
msgid "B<use_hard_links>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:358
msgid ""
"This option has been put in for the people who can't handle symbolic links "
"(a boot loader that does not handle symbolic links, for example). If set to "
"YES, this shall cause the kernel image postinst to use hard link instead of "
"symbolic links for the automatically handled /vmlinuz and /vmlinuz.old.  I "
"have tried to make it compatible with B<move_image> and B<reverse_symlinks> "
"Caveat: It is up to the end user to ensure that the B<image_dest> directory "
"and the location of the image (nominally /boot) live on the same file system "
"(since one can't make hard links across file systems).  B<You have been "
"warned.>"
msgstr ""

# type: TP
#: kernel-img.conf.5:358
#, no-wrap
msgid "B<relink_build_link>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:365
msgid ""
"This option manipulates the build link created by recent kernels. If the "
"link is a dangling link, and if a the corresponding kernel-headers appear to "
"have been installed on the system, a new symlink shall be created to point "
"to them. The default is to relink the build link (YES)."
msgstr ""

# type: TP
#: kernel-img.conf.5:365
#, no-wrap
msgid "B<force_build_link>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:372
msgid ""
"This option manipulates the build link created by recent kernels. If the "
"link is a dangling link, a new symlink shall be created to point to "
"/usr/src/kernel-headers-X.Y.ZZ, whether they have been installed or not. The "
"default is unset, we don't create potentially dangling symlinks by default."
msgstr ""

# type: TP
#: kernel-img.conf.5:372
#, no-wrap
msgid "B<relink_src_link>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:377
msgid ""
"This option manipulates the source link created by recent kernels. If the "
"link is a dangling link it is deleted at install time. The default is to "
"relink (delete) the source link (YES)."
msgstr ""

# type: TP
#: kernel-img.conf.5:377
#, no-wrap
msgid "B<mkimage>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:388
#, no-wrap
msgid ""
"This should be a command that produces an initrd image given a\n"
"directory. It is passed to the \n"
"I<mkinitrd>\n"
"program's \n"
"I<-m>\n"
"option. For example, it can be\n"
"  mkimage=genromfs -d %s -f %s\n"
"or\n"
"  mkimage=mkcramfs %s %s\n"
msgstr ""

# type: TP
#: kernel-img.conf.5:388
#, no-wrap
msgid "B<silent_modules>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:403
msgid ""
"This option has been put in for the people who are vastly irritated on being "
"warned about preexisting modules directory I</lib/modules/$version> That "
"directory may belong to an old or defunct I<kernel-image-$version> package, "
"in which case problems may arise with leftover modules in that dir tree, or "
"the directory may legitimately exist due to a independent modules package "
"being installed for this kernel version that has already been unpacked.  In "
"this latter case the existence of the directory is benign.  If you set this "
"variable, you shall no longer be given a chance to abort if a preexisting "
"modules directory I</lib/modules/$version> is detected.  This is unset be "
"default."
msgstr ""

# type: TP
#: kernel-img.conf.5:403
#, no-wrap
msgid "B<silent_loader>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:412
msgid ""
"If set, this option shall cause the question asked before running the boot "
"loader in the installation process to be skipped. Whether or not the boot "
"loader is run is unaffected by this option ( see B<do_bootloader> to see how "
"to control whether the boot loader is run or not, and the absence of the "
"configuration file will also make the install process voluble and "
"interactive)."
msgstr ""

# type: TP
#: kernel-img.conf.5:412
#, no-wrap
msgid "B<ignore_depmod_err>"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:417
msgid ""
"If set, does not prompt to continue after a depmod problem in the "
"postinstall script. This facilitates automated installs, though it may mask "
"a problem with the kernel image. A diagnostic is still issued."
msgstr ""

# type: SH
#: kernel-img.conf.5:417 kernel-package.5:170 kernel-packageconfig.8:44 kernel-pkg.conf.5:434 make-kpkg.8:758
#, no-wrap
msgid "FILES"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:420
msgid "The file described here is I</etc/kernel-img.conf.>"
msgstr ""

# type: SH
#: kernel-img.conf.5:420 kernel-package.5:173 kernel-packageconfig.8:47 kernel-pkg.conf.5:439 make-kpkg.8:783
#, no-wrap
msgid "SEE ALSO"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:425
msgid "B<make-kpkg>(1), B<kernel-pkg.conf>(5), B<make>(1), B<The GNU Make manual.>"
msgstr ""

# type: SH
#: kernel-img.conf.5:425 kernel-package.5:177 kernel-pkg.conf.5:444
#, no-wrap
msgid "BUGS"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:427 kernel-package.5:179 kernel-pkg.conf.5:446
msgid "There are no bugs.  Any resemblance thereof is delirium. Really."
msgstr ""

# type: SH
#: kernel-img.conf.5:427 kernel-package.5:179 kernel-packageconfig.8:49 kernel-pkg.conf.5:446 make-kpkg.8:795
#, no-wrap
msgid "AUTHOR"
msgstr ""

# type: Plain text
#: kernel-img.conf.5:429 kernel-package.5:181 kernel-packageconfig.8:52 kernel-pkg.conf.5:448 make-kpkg.8:797
msgid ""
"This manual page was written by Manoj Srivastava "
"E<lt>srivasta@debian.orgE<gt>, for the Debian GNU/Linux system."
msgstr ""

# type: TH
#: kernel-package.5:26
#, no-wrap
msgid "KERNEL-PACKAGE"
msgstr ""

# type: TH
#: kernel-package.5:26
#, no-wrap
msgid "May 25 1999"
msgstr ""

# type: Plain text
#: kernel-package.5:31
msgid "kernel-package - A system for creating kernel related packages"
msgstr ""

# type: Plain text
#: kernel-package.5:42
msgid ""
"The B<kernel-package> package grew out of desire to automate the routine "
"steps required to compile and install a custom kernel. If you are looking "
"for instructions on how to use B<kernel-package,> please have a look at the "
"manual B<make-kpkg (1).> Configuring instructions are to be found in "
"B<kernel-pkg.conf(5).>"
msgstr ""

# type: SH
#: kernel-package.5:42
#, no-wrap
msgid "Advantages of using kernel-package"
msgstr ""

# type: TP
#: kernel-package.5:44
#, no-wrap
msgid "B<i) Convenience.>"
msgstr ""

# type: Plain text
#: kernel-package.5:53
msgid ""
"I used to compile kernels manually, and it involved a series of steps to be "
"taken in order; kernel-package was written to take all the required steps "
"(it has grown beyond that now, but essentially, that is what it does). This "
"is especially important to novices: B<make-kpkg> takes all the steps "
"required to compile a kernel, and installation of kernels is a snap."
msgstr ""

# type: TP
#: kernel-package.5:53
#, no-wrap
msgid "B<ii) Multiple images support>"
msgstr ""

# type: Plain text
#: kernel-package.5:57
msgid ""
"It allows you to keep multiple version of kernel images on your machine with "
"no fuss."
msgstr ""

# type: TP
#: kernel-package.5:57
#, no-wrap
msgid "B<iii) Multiple Flavors of the same kernel version>"
msgstr ""

# type: Plain text
#: kernel-package.5:64
msgid ""
"It has a facility for you to keep multiple flavors of the same kernel "
"version on your machine (you could have a stable 2.0.36 version, and a "
"2.0.36 version patched with the latest drivers, and not worry about "
"contaminating the modules in I</lib/modules).>"
msgstr ""

# type: TP
#: kernel-package.5:64
#, no-wrap
msgid "B<iv) Built in defaults>"
msgstr ""

# type: Plain text
#: kernel-package.5:70
msgid ""
"It knows that some architectures do not have vmlinuz (using vmlinux "
"instead), and other use zImage rather than bzImage, and calls the "
"appropriate target, and takes care of moving the correct file into place."
msgstr ""

# type: TP
#: kernel-package.5:70
#, no-wrap
msgid "B<v) Module hooks>"
msgstr ""

# type: Plain text
#: kernel-package.5:78
msgid ""
"Several other kernel module packages are hooked into B<kernel-package,> so "
"one can seamlessly compile, say, B<pcmcia> modules at the same time as one "
"compiles a kernel, and be assured that the modules so compiled are "
"compatible."
msgstr ""

# type: TP
#: kernel-package.5:78
#, no-wrap
msgid "B<vi) dpkg support>"
msgstr ""

# type: Plain text
#: kernel-package.5:84
msgid ""
"It enables you to use the package management system to keep track of the "
"kernels created. Using make-kpkg creates a .deb file, and dpkg can track it "
"for you. This facilitates the task of other packages that depend on the "
"kernel packages."
msgstr ""

# type: TP
#: kernel-package.5:84
#, no-wrap
msgid "B<vii) Configuration tracking>"
msgstr ""

# type: Plain text
#: kernel-package.5:91
msgid ""
"It keeps track of the configuration file for each kernel image in I</boot,> "
"which is part of the image package, and hence is the kernel image and the "
"configuration file are always together."
msgstr ""

# type: TP
#: kernel-package.5:91
#, no-wrap
msgid "B<viii) Multiple config files>"
msgstr ""

# type: Plain text
#: kernel-package.5:97
msgid ""
"It allows you to specify a directory with config files, with separate config "
"files for each sub-architecture (even allows for different config files for "
"i386, i486, etc). It is really neat for people who need to compile kernels "
"for a variety of sub architectures."
msgstr ""

# type: TP
#: kernel-package.5:97
#, no-wrap
msgid "B<ix) Auxiliary kernel .deb packages>"
msgstr ""

# type: Plain text
#: kernel-package.5:103
msgid ""
"It allows to create a package with the headers, or the sources, also as a "
"deb file, and enables the package management system to keep track of those "
"(and there are packages that depend on the package management system being "
"aware of these packages)."
msgstr ""

# type: TP
#: kernel-package.5:103
#, no-wrap
msgid "B<x) Maintainer script services>"
msgstr ""

# type: Plain text
#: kernel-package.5:112
msgid ""
"Since the kernel image package is a full fledged Debian package, it comes "
"with maintainer scripts, which take care of details like offering to make a "
"boot disk, manipulating symbolic links in / so that you can make boot loader "
"scripts static (just refer to the symbolic links, rather than the real image "
"files; the names of the symbolic links do not change, but the kernel image "
"file names change with the version)."
msgstr ""

# type: TP
#: kernel-package.5:112
#, no-wrap
msgid "B<xi) Sub architecture support>"
msgstr ""

# type: Plain text
#: kernel-package.5:116
msgid ""
"There is support for the multitudinous sub architectures that have blossomed "
"under the umbrella of the m68k and power-PC architectures."
msgstr ""

# type: TP
#: kernel-package.5:116
#, no-wrap
msgid "B<xii) kernel-patch support>"
msgstr ""

# type: Plain text
#: kernel-package.5:121
msgid ""
"There is support there for optionally applying patches to the kernel "
"provided as a kernel-patch .deb file, and building a patched kernel "
"auto-magically, and still retain an UN-patched kernel source tree."
msgstr ""

# type: TP
#: kernel-package.5:121
#, no-wrap
msgid "B<xiii) Portable kernel images>"
msgstr ""

# type: Plain text
#: kernel-package.5:127
msgid ""
"Allows one to compile a kernel for another computer, for example using a "
"fast machine to compile the kernel for installation on a slower "
"machine. This is really nice since the modules are all included in the .deb; "
"and one does not have to deal with modules manually."
msgstr ""

# type: TP
#: kernel-package.5:127
#, no-wrap
msgid "B<xiv) Customizations on the target host>"
msgstr ""

# type: Plain text
#: kernel-package.5:134
msgid ""
"The postinst looks at a configuration file on the installation machine (as "
"opposed to the machine that the image was compiled on), and allows the local "
"admin to decide on issues of symbolic links, and whether the boot loader "
"stuff must be run, and whether one wants to create a boot floppy or not."
msgstr ""

# type: TP
#: kernel-package.5:134
#, no-wrap
msgid "B<xv) runtime hooks>"
msgstr ""

# type: Plain text
#: kernel-package.5:141
msgid ""
"The postinst and the postrm scripts allow the local admin on the "
"installation machine to add a script into runtime hooks; this can allow, "
"amongst other things, grub users to add and remove kernel image stanzas from "
"the grub menu (example scripts to do this are in the package)."
msgstr ""

# type: TP
#: kernel-package.5:141
#, no-wrap
msgid "B<xvi) Append descriptive bits to the kernel version>"
msgstr ""

# type: Plain text
#: kernel-package.5:147
msgid ""
"One can append to the kernel version on the command line, or by setting an "
"environment variable. So if your kernel is called "
"kernel-image-2.4.1John.Home; it is unlikely to be overridden by the official "
"2.4.1 kernel, since they are not the same version."
msgstr ""

# type: SH
#: kernel-package.5:148
#, no-wrap
msgid "Disadvantages of using make-kpkg"
msgstr ""

# type: TP
#: kernel-package.5:149
#, no-wrap
msgid "B<i) Automation.>"
msgstr ""

# type: Plain text
#: kernel-package.5:153
msgid ""
"This is a cookie cutter approach to compiling kernels, and there are people "
"who like being close to the bare metal."
msgstr ""

# type: TP
#: kernel-package.5:153
#, no-wrap
msgid "B<ii) Non traditional>"
msgstr ""

# type: Plain text
#: kernel-package.5:158
msgid ""
"This is not how it is done in the non-Debian world. This flouts "
"tradition. (It has been pointed out, though, that this is fast becoming "
"Debian tradition)."
msgstr ""

# type: TP
#: kernel-package.5:158
#, no-wrap
msgid "B<iii) Needs superuser>"
msgstr ""

# type: Plain text
#: kernel-package.5:169
msgid ""
"It forces you to use B<fakeroot> or B<sudo> or B<super> or be root to create "
"a kernel image .deb file (this is not as bad as it used to be before "
"B<fakeroot)>"
msgstr ""

# type: Plain text
#: kernel-package.5:173
msgid "I</etc/kernel-pkg.conf.> I</etc/kernel-img.conf.>"
msgstr ""

# type: Plain text
#: kernel-package.5:177
msgid "B<make-kpkg>(1), B<make>(1), B<The GNU Make manual.>"
msgstr ""

# type: TH
#: kernel-packageconfig.8:27
#, no-wrap
msgid "KERNEL-PACKAGECONFIG"
msgstr ""

# type: TH
#: kernel-packageconfig.8:27 kernel-pkg.conf.5:26
#, no-wrap
msgid "Jan 7 1997"
msgstr ""

# type: Plain text
#: kernel-packageconfig.8:30
msgid "kernel-packageconfig - Internal handler of /etc/kernel-pkg.conf."
msgstr ""

# type: Plain text
#: kernel-packageconfig.8:32
msgid "B<kernel-packageconfig>"
msgstr ""

# type: Plain text
#: kernel-packageconfig.8:42
msgid ""
"The utility B<kernel-packageconfig> is called internally by the "
"B<kernel-package postinst> script to set up the conf file "
"/etc/kernel-pkg.conf.  It is idempotent, and only modifies the file if it "
"contains factory default values. It is B<not> meant for general use."
msgstr ""

# type: SH
#: kernel-packageconfig.8:42 make-kpkg.8:79
#, no-wrap
msgid "OPTIONS"
msgstr ""

# type: Plain text
#: kernel-packageconfig.8:44
msgid "This utility does not have any options."
msgstr ""

# type: Plain text
#: kernel-packageconfig.8:47
msgid "The files affected by this program are I</etc/kernel-pkg.conf.>"
msgstr ""

# type: Plain text
#: kernel-packageconfig.8:49
msgid "B<kernel-pkg.conf (5)>"
msgstr ""

# type: TH
#: kernel-pkg.conf.5:26
#, no-wrap
msgid "KERNEL-PKG.CONF"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:31
msgid "kernel-pkg.conf - site wide configuration file for make-kpkg"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:35
msgid "I</etc/kernel-pkg.conf> or I<~/.kernel-pkg.conf>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:48
msgid ""
"The file I</etc/kernel-pkg.conf> or I<~/.kernel-pkg.conf> is actually a "
"B<Makefile> snippet included during the kernel packages build process, and "
"hence you may put any legal Makefile directive in that file (just make very "
"sure you know what you are doing).  If the per user configuration file "
"I<~/.kernel-pkg.conf> exists, it is loaded in favor of the system wide "
"configuration file I</etc/kernel-pkg.conf.>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:54
msgid ""
"All the variables have reasonable default values, and maybe overridden on a "
"per run or a per individual basis by using environment variables.  Some of "
"the variables can further be overridden by options to B<make-kpkg.>"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:56
#, no-wrap
msgid "B<maintainer>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:65
msgid ""
"Local kernel-* package maintainer. Set up at package installation by the "
"I<postinst.> Can be overridden by the environment variable "
"B<KPKG_MAINTAINER.> Please note that any apostrophes \"'\" shall have to be "
"quoted like so: maintainer = John O'\\e''Brien. Yes, this is ugly, but this "
"works."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:65
#, no-wrap
msgid "B<email>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:72
msgid ""
"The email address of that person.  Set up at package installation by the "
"I<postinst.> Can be overridden by the environment variable B<KPKG_EMAIL.>"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:72
#, no-wrap
msgid "B<pgp>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:87
msgid ""
"Name to search for in the pgp database B<if> separate modules (like pcmcia "
"etc) are being built in I</usr/src/modules/.> Can be overridden by the "
"environment variable B<PGP_SIGNATURE,> and is overridden (again) by the "
"I<--pgpsign> option of B<make-kpkg.> Defaults to I<maintainer.> (Optional)"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:87 make-kpkg.8:715
#, no-wrap
msgid "B<debian>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:101
msgid ""
"The version of the kernel packages, includes both the upstream Set to YES, "
"this causes a make clean to be run in the version and the Debian "
"revision. Can be overridden by the environment variable B<DEBIAN_REVISION,> "
"and is overridden (again) by the I<--revision> option of B<make-kpkg.> "
"Defaults to I<E<lt>VERSIONE<gt>-10.0.0.Custom> (Optional)"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:101
#, no-wrap
msgid "B<debian_revision_mandatory>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:108
msgid ""
"Normally unset. If this, or the environment variable "
"B<DEBIAN_REVISION_MANDATORY> are set, then not providing a debian revision "
"results in an error (and B<make-kpkg> shall not provide a default value of "
"10.0.0.Custom)"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:120
msgid ""
"Set to True if you want the symbolic link to the kernel image, namely, "
"I<vmlinuz> in I</boot> rather than the default I</.> Can be overridden by "
"the environment variable B<LINK_IN_BOOT.> Defaults to undefined.  (Optional)"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:120
#, no-wrap
msgid "B<kimage>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:134
msgid ""
"The kernel image type (i.e. zImage or bzImage). Can be overridden from the "
"environment variable B<IMAGE_TYPE,> and is overridden (again) by the options "
"I<--zimage> or I<--bzimage> of B<make-kpkg.> Defaults to I<bzImage.> "
"(Optional)"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:153
msgid ""
"Whether to use symlinks to the I<image> file. Can be overridden by the "
"environment variable B<NO_SYMLINK> Mutually exclusive to "
"I<reverse_symlinks.> Can be used with I<link_in_boot.> The image is placed "
"in vmlinuz (instead of /boot/vmlinuz-X.X.XX). The old vmlinuz is moved to "
"vmlinuz.old unconditionally. (Normally, that is only done if the version of "
"the new image differs from the old one). This restricts you to two images, "
"unless you take additional action and save copies of older images. This is "
"for people who have I</boot> on a system that does not use symbolic links "
"(and say, they use loadlin as a boot loader). This is a Hack.  Defaults to "
"undefined (optional)"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:176
msgid ""
"Whether to use reverse symlinks (that is, the real file is the one without "
"the version number, and the numbered version is the link) to the I<image> "
"file. Can be overridden by the environment variable B<REVERSE_SYMLINK> "
"Mutually exclusive to I<no_symlinks.> Can be used with I<link_in_boot.> Just "
"like I<no_symlinks,> except that the /boot/vmlinuz-X.XX is symlinked to the "
"real new image, vmlinuz. This, too, restricts you to just two images unless "
"further action is taken. The older symlinks are left dangling. This is for "
"people with I</boot> on umsdos, and who can't see the link in dos, but do "
"want to know the image version when in Linux.  This is a Hack.  Defaults to "
"undefined. (optional)"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:176
#, no-wrap
msgid "B<patch_the_kernel>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:188
msgid ""
"This is an experts only variable. If set to YES (ENV variable "
"B<PATCH_THE_KERNEL> overrides this), the build process causes run-parts to "
"be run over I</usr/src/kernel-patches/$(architecture)/apply> and (hopefully) "
"reverses the process during clean by running run-parts over "
"I</usr/src/kernel-patches/$(architecture)/unpatch.> The special architecture "
"all is used for arch independent patches."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:188
#, no-wrap
msgid "B<config_target>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:201
msgid ""
"What type of configure step to do.  Defaults to oldconfig, which is good for "
"non-interactive (or minimally interactive) runs.  If you are setting "
"patch_the_kernel to YES and some of the patches change what configuration "
"settings are available, then you may wish to set this to something else "
"(like menuconfig or xconfig).  (ENV variable B<CONFIG_TARGET> overrides this "
"setting.)  If the value of config_target is other than config, oldconfig, "
"menuconfig or xconfig then it is reset to oldconfig."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:201
#, no-wrap
msgid "B<use_saved_config>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:208
msgid ""
"This is an experts only variable. If set to NO (ENV variable "
"B<USE_SAVED_CONFIG> overrides this), the file .config.save in the top level "
"directory is ignored."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:208
#, no-wrap
msgid "B<root_cmd>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:235
msgid ""
"This is a variable meant to be passed on to B<dpkg-buildpackage> in the "
"I<buildpackage> target.  This should be set to a means of gaining superuser "
"access (for example, I<`sudo'> or I<`fakeroot')> as needed by "
"B<dpkg-buildpackages'> -r option. The environment variable B<ROOT_CMD> "
"overrides this. Use the environment variable B<UNSIGN_SOURCE> to pass an "
"option to dpkg-buildpackage to not sign the source; similarly, use the "
"environment variable B<UNSIGN_CHANGELOG> to pass an option to "
"dpkg-buildpackage to not sign the changelog. Again, this variable is only "
"useful for the I<buildpackage> target. Set the environment variable "
"B<ROOT_CMD> if you just wish to build the kernel image, for instance."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:235
#, no-wrap
msgid "B<delete_build_link>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:242
msgid ""
"If set to YES, the symbolic link I</lib/modules/$VERSION/build> shall be "
"removed from the resulting .deb package.  The environment variable "
"B<DELETE_BUILD_LINK> overrides this."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:242
#, no-wrap
msgid "B<do_clean\t>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:249
msgid ""
"Set to YES, this causes a make clean to be run in the kernel source tree "
"after building the kernel image package. The environment variable "
"B<CLEAN_SOURCE> overrides this."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:249
#, no-wrap
msgid "B<install_vmlinux>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:254
msgid ""
"Set to YES to install the uncompressed kernel ELF image along with the "
"bootable compressed kernel image (vmlinuz).  This image is necessary for "
"profiling kernel and userspace with oprofile (oprofile.sourceforge.net, i386 "
"only)."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:254
#, no-wrap
msgid "B<image_clean_hook>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:263
msgid ""
"Set to point to an executable, this shall cause that executable to run from "
"the top level of the (temporary) kernel image tree before the kernel image "
"is packaged. This has no effect on anything other than the image that is "
"being packaged -- if the script operates on the current directory and its "
"children, the original source tree should remain intact.  This is to "
"facilitate massaging of the kernel image that is packaged."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:263
#, no-wrap
msgid "B<source_clean_hook>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:275
msgid ""
"Set to point to an executable, this shall cause that executable to run from "
"the top level of the (temporary) kernel source tree before the sources are "
"packaged, I<./debian/tmp-source/usr/src/kernel-source-X.X.XX.> This has no "
"effect on anything other than the sources that are being packaged -- if the "
"script operates on the current directory and its children, the original "
"source tree should remain intact. This is to facilitate massaging of the "
"kernel sources that are packaged (for example, to remove version control "
"directories, or to prune away unwanted architectures)."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:275
#, no-wrap
msgid "B<header_clean_hook>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:285
msgid ""
"Set to point to an executable, this shall cause that executable to run from "
"the top level of the kernel headers before the headers are packaged. This "
"has no effect on anything other than the sources that are being packaged -- "
"if the script operates on the current directory and its children, the "
"original source tree should remain intact. This is to facilitate massaging "
"of the kernel headers that are packaged (for example, to remove version "
"control directories, or to prune away unwanted architectures)."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:285
#, no-wrap
msgid "B<doc_clean_hook>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:295
msgid ""
"Set to point to an executable, this shall cause that executable to run from "
"the top of the documentation tree before kernel documentation is packaged.  "
"This has no effect on anything other than the documentation that is being "
"packaged -- if the script operates on the current directory and its "
"children, the original source tree should remain intact. This is to "
"facilitate massaging of the kernel documentation that is packaged (for "
"example, to remove version control directories, or to prune away unwanted "
"architectures)."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:295
#, no-wrap
msgid "B<extra_docs>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:307
msgid ""
"This variable should be set to the path of any extra documentation that "
"should be installed in I</usr/share/doc/kernel-image-X.X.XX/> "
"directory. There is no checking for name conflicts, and the files are not "
"compressed. Hence, if you want the files to be compressed, please "
"precompress it and provide the path of the compressed file.  The environment "
"variable B<EXTRA_DOCS> overrides this, and would most likely be how extra "
"documentation is specified."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:307
#, no-wrap
msgid "B<kpkg_follow_symlinks_in_src>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:317
msgid ""
"This option is especially useful for people who use symlink farms to compile "
"kernels. With this option, kernel-source and kernel-header packages shall "
"not be just full of dangling symlinks, instead, the symbolic links shall be "
"followed. Please note that any symbolic links in the kernel sources would be "
"flattened as well.  The environment variable B<KPKG_FOLLOW_SYMLINKS_IN_SRC> "
"overrides this."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:317
#, no-wrap
msgid "B<make_libc_headers>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:333
msgid ""
"This is meant to be used by the I<libc6> maintainer, when he compiles "
"I<libc6,> to also package up the corresponding headers.  B<DO NOT SET THIS> "
"unless you know what you are doing, since a mismatch between the headers you "
"package and I<libc6> may well create a subtle instability in all code "
"compiled on your machine. You have been warned. The environment variable "
"B<MAKE_LIBC_HEADERS> overrides this."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:333 make-kpkg.8:426
#, no-wrap
msgid "B<CONCURRENCY_LEVEL>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:343
msgid ""
"If defined, this variable sets the concurrency level of make used to compile "
"the kernel and the modules set using I<-j> flags to the sub make in the "
"B<build> target of B<make-kpkg.> Should be a (small) integer, if used."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:343
#, no-wrap
msgid "B<ARCH_IN_NAME>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:354
msgid ""
"If defined, this variable causes B<make-kpkg> to use an extended name for "
"the kernel image package by embedding the subarchitecture in the image name, "
"so one could write a script to create multiple subarchitectures one after "
"the other.  B<Please note> that only the package I<name> is affected, not "
"module locations etc."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:354 kernel-pkg.conf.5:395
#, no-wrap
msgid "B<CONFDIR>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:364
msgid ""
"This variable should be set to a directory which contains architecture "
"specific I<.config> files (look at I</usr/share/kernel-package/Config> for "
"examples). This is useful for people who need to compile for several "
"architectures. Defaults to I</usr/share/kernel-package/Config>"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:364
#, no-wrap
msgid "B<INITRD_CMD>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:380
msgid ""
"Set this variable to a space separated list of executables that create an "
"initial RAM disk. This only has any effect if installing a kernel-image that "
"uses an initial RAM disk. The commands so pointed must be drop-in compatible "
"with I<mkinitrd.> This sets the built in default used by the postinst script "
"at installation time, it can be overridden by the administrator at any "
"target machine in B</etc/kernel-img.conf.> If not set, it Defaults to a "
"subset of I<mkinitrd mkinitrd.yaird mkinitramfs ,> the subset being decided "
"based on the version of the kernel being built, so one should refrain from "
"setting this manually -- unless one knows what one is doing."
msgstr ""

# type: TP
#: kernel-pkg.conf.5:380
#, no-wrap
msgid "B<IMAGEDIR>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:389
msgid ""
"If you want the image to be stored elsewhere than I</boot> set this variable "
"to the dir where you want the image. This may be of help to B<loadlin> "
"users. Defaults to I</boot.>"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:389
#, no-wrap
msgid "B<MODULE_LOC>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:395
msgid ""
"Set this variable, either in the environment or in the config file, to point "
"to the location where the add-on modules are located. Defaults to "
"I</usr/src/modules>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:401
msgid ""
"Set this variable, either in the environment or in the config file, to point "
"to the location where the kernel config files are located. Defaults to "
"I</usr/share/kernel-package/Config>"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:401
#, no-wrap
msgid "B<PATCH_DIR>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:407
msgid ""
"Set this variable, either in the environment or in the config file, to point "
"to the location where the add-on kernel patches are located. Defaults to "
"I</usr/src/kernel-patches/ARCHITECTURE>"
msgstr ""

# type: TP
#: kernel-pkg.conf.5:407
#, no-wrap
msgid "B<ALL_PATCH_DIR>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:413
msgid ""
"Set this variable, either in the environment or in the config file, to point "
"to the location where the add-on arch independent kernel patches are "
"located. Defaults to I</usr/src/kernel-patches/all>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:415
msgid "The value of a variable can be set so:"
msgstr ""

# type: IP
#: kernel-pkg.conf.5:415
#, no-wrap
msgid "a)"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:418
msgid ""
"Defaults exist in the rules file. These are the values used if no "
"customization is done."
msgstr ""

# type: IP
#: kernel-pkg.conf.5:418
#, no-wrap
msgid "b)"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:422
msgid ""
"Variables can be set in the config file I</etc/kernel-pkg.conf.> These "
"values override the defaults."
msgstr ""

# type: IP
#: kernel-pkg.conf.5:422
#, no-wrap
msgid "c)"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:425
msgid ""
"Variables can also be set by setting a corresponding environment variable.  "
"These values override the config file and the defaults."
msgstr ""

# type: IP
#: kernel-pkg.conf.5:425
#, no-wrap
msgid "d)"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:430
msgid ""
"Using B<make-kpkg> options, or, if using the rules file directly, on command "
"line"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:432
msgid "B<# xxx/rules DEBIAN_REVISION=2.0a kernel_image>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:434
msgid "This overrides all the above methods."
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:439
msgid ""
"The file described here is I</etc/kernel-pkg.conf.> or "
"I<~/.kernel-pkg.conf.>"
msgstr ""

# type: Plain text
#: kernel-pkg.conf.5:444
msgid "B<make-kpkg>(1), B<kernel-img.conf>(5), B<make>(1), B<The GNU Make manual.>"
msgstr ""

# type: TH
#: make-kpkg.8:27
#, no-wrap
msgid "MAKE-KPKG"
msgstr ""

# type: TH
#: make-kpkg.8:27
#, no-wrap
msgid "Nov 14 2002"
msgstr ""

# type: Plain text
#: make-kpkg.8:30
msgid "make-kpkg - build Debian kernel packages from Linux kernel sources"
msgstr ""

# type: Plain text
#: make-kpkg.8:34
msgid "B<make-kpkg> I<[options]> \\&[target [target ...]]"
msgstr ""

# type: Plain text
#: make-kpkg.8:53
msgid ""
"This manual page explains the Debian B<make-kpkg> utility, which is used to "
"create the kernel related Debian packages. This utility needs to be run from "
"a top level Linux kernel source directory, which has been previously "
"configured (unless you are using the configure target). Normally, if "
"kernel-package does not find a I<.config> file in the current directory, it "
"tries very hard to get an appropriate one (usually a config file already "
"tailored for Debian kernels for that architecture), and then calls B<make "
"oldconfig> to let the user answer any new questions. Typically, you run this "
"command as root, or under B<fakeroot,> or tell B<make-kpkg> how to become "
"root, like so:"
msgstr ""

# type: Plain text
#: make-kpkg.8:56
msgid "make-kpkg --rootcmd fakeroot kernel_image"
msgstr ""

# type: Plain text
#: make-kpkg.8:59
msgid ""
"The Debian package file is created in the parent directory of the kernel "
"source directory where this command is run."
msgstr ""

# type: Plain text
#: make-kpkg.8:70
msgid ""
"Also, please note that some versions of gcc do not interact well with the "
"kernel sources (gcc 2.95 has problems compiling the kernel without the flag "
"I<'-fno-strict-aliasing'.> This issue has been taken care of for recent "
"kernels (2.2 and 2.4 series are fine) (I think you may have to edit the "
"makefile for older kernels, or something).  You may control which version of "
"gcc used in kernel compilation by setting the Makefile variables CC and "
"HOSTCC in the top level kernel Makefile. You can do this simply by"
msgstr ""

# type: Plain text
#: make-kpkg.8:72
#, no-wrap
msgid "  % MAKEFLAGS=\"CC=gcc-2.95\" make-kpkg ...\n"
msgstr ""

# type: Plain text
#: make-kpkg.8:75
msgid "(please see the top level kernel Makefile for variables that can be set)."
msgstr ""

# type: Plain text
#: make-kpkg.8:79
msgid ""
"B<WARNING:> Do NOT set the -j option in MAKEFLAGS directly, this shall cause "
"the build to fail. Use CONCURRENCY_LEVEL as specified below."
msgstr ""

# type: Plain text
#: make-kpkg.8:82
msgid "B<--help> Print out a usage message."
msgstr ""

# type: TP
#: make-kpkg.8:82
#, no-wrap
msgid "B<--revision> number"
msgstr ""

# type: Plain text
#: make-kpkg.8:101
msgid ""
"Changes the Debian revision number for the packages produced to the argument "
"B<number.> This has certain constraints: the --revision option only has an "
"effect during the configure phase.  So, if you want to re-run B<make-kpkg> "
"with a different revision number, you have to make sure you start with a "
"clean slate.  Secondly, the version may contain only alphanumerics and the "
"characters ~ + . (tilde, full stop and plus)  and must contain a "
"digit. (Look at the Policy manual for details).  Optionally, you may prepend "
"the revision with a digit followed by a colon (:). The default is "
"B<10.00.Custom> unless the environment variable B<DEBIAN_REVISION_MANDATORY> "
"is set, in which case an error is generated if the revision is not set on "
"the command line or the configuration file."
msgstr ""

# type: TP
#: make-kpkg.8:101
#, no-wrap
msgid "B<--append-to-version> foo"
msgstr ""

# type: TP
#: make-kpkg.8:103
#, no-wrap
msgid "B<--append_to_version> foo"
msgstr ""

# type: Plain text
#: make-kpkg.8:159
msgid ""
"This argument ( B<foo> ) is appended to the value of the EXTRAVERSION "
"variable present in the kernel Makefile. Since EXTRAVERSION is a component "
"of the kernel version, it is also added to the Debian package name, and, as "
"such must obey the policy governing the package name. That means it may "
"contain only B<lowercase> alphanumerics and the characters ~ - + . (tilde, "
"full stop, hyphen, and plus). Uppercase letters are not permitted under the "
"Policy for a new package.  If the environment variable "
"B<IGNORE_UPPERCASE_VERSION> is set, make-kpkg shall lower case version "
"numbers set in the Makefile or in the I<localversion> file.  This option "
"over rides the environment variable B<APPEND_TO_VERSION> Please note that "
"you B<\\s-1must\\s0> run a B<make-kpkg> I<clean> after configuring the "
"kernel using I<make (x|menu)?config,> since that creates the file "
"I<include/linux/version.h> B<without> the I<append_to_version> data "
"(foo). This file won't be updated by the make-kpkg run (make-kpkg creates "
"version.h if it doesn't exist, but doesn't touch if exists), so the final "
"kernel will _not_ have the append_to_version data in its version number it "
"shall look for the modules and symbols in all the wrong places. The simplest "
"solution is either to remove include/linux/version.h after configuring and "
"before compiling, or running B<make-kpkg clean> after configuring, before "
"compiling.  B<Note> also that once you use B<--append_to_version> foo for "
"configuring, or building the kernel-image, you need to also use the same "
"option in any later invocation of make-kpkg (say, for building stand alone "
"modules, or something).  B<make-kpkg> does not remember the argument foo in "
"between invocations (this is different from the behavior of --revision, "
"which we do remember in between invocations). If you are annoyed by "
"make-kpkg whining about using B<--append_to_version> and there already being "
"a B<version.h> file from before, you can set the environment variable "
"B<VERSION_H_OK> which shall shut off the warning."
msgstr ""

# type: TP
#: make-kpkg.8:159
#, no-wrap
msgid "B<--added-modules\\ foo>"
msgstr ""

# type: TP
#: make-kpkg.8:161
#, no-wrap
msgid "B<--added_modules\\ foo>"
msgstr ""

# type: Plain text
#: make-kpkg.8:174
msgid ""
"The argument should be a comma separated list of additional add-on modules "
"(not in the main kernel tree) that you wish to build when you invoke the "
"modules_blah targets. You may give full path names of the directory the "
"modules reside in, or just the module name if it can be found in "
"B<MODULE_LOC,> which defaults to I</usr/src/modules.> The default is that "
"all modules in B<MODULE_LOC,> are compiled when the modules_blah targets are "
"invoked."
msgstr ""

# type: TP
#: make-kpkg.8:174
#, no-wrap
msgid "B<--added-patches\\ foo>"
msgstr ""

# type: TP
#: make-kpkg.8:176
#, no-wrap
msgid "B<--added_patches\\ foo>"
msgstr ""

# type: Plain text
#: make-kpkg.8:182
msgid ""
"The argument should be a comma separated list of additional patches to the "
"kernel sources. This automatically sets the I<patch_the_kernel> "
"configuration option to YES."
msgstr ""

# type: Plain text
#: make-kpkg.8:192
msgid ""
"Unlike the treatment of the modules, you may only give the patch file "
"basename (not the full path name of the patch file). Additionally, any patch "
"that tries to change the version number, either by editing the B<Makefile,> "
"or by adding a B<.localversion> file, is not supported, and will break the "
"compilation, since the version number has already been fixed in "
"I<debian/changelog.>"
msgstr ""

# type: Plain text
#: make-kpkg.8:214
msgid ""
"For each file E<lt>patch_nameE<gt> in the list, the following process is "
"followed: If the file can be found in the directories "
"B<ALL_PATCH_DIR/{apply,unpatch}/,> then the file "
"B<ALL_PATCH_DIR/apply/E<lt>patch_nameE<gt>> shall be executed in turn during "
"the configure phase (and presumably this applies the "
"patch). Correspondingly, the file "
"B<ALL_PATCH_DIR/unpatch/E<lt>patch_nameE<gt>> shall be executed in the clean "
"phase.  The default is that all patches are applied by running all the "
"executable files in B<ALL_PATCH_DIR/apply/> if requested (Either by setting "
"the configuration option B<patch_the_kernel> or the environment variable "
"B<PATCH_THE_KERNEL> to YES).  Please note that the patches are UN-installed "
"from the source when you run the clean target.  This cleanup can be "
"prevented by setting the environment variable B<NO_UNPATCH_BY_DEFAULT>"
msgstr ""

# type: Plain text
#: make-kpkg.8:219
msgid ""
"In the above, B<ALL_PATCH_DIR> defaults to a subdirectory of "
"I</usr/src/kernel-patches/.>"
msgstr ""

# type: Plain text
#: make-kpkg.8:245
msgid ""
"Some times it would be convenient to have the patches applied when one asks "
"for specific patches using this option, without also having to explicitly "
"set the environment variable. Since setting the environment variable "
"B<PATCH_THE_KERNEL> to YES could be dangerous, (for in that case all patches "
"may be installed when you want none, and did not specify the added_patches "
"option), You may also set the variable PATCH_THE_KERNEL to I<AUTO,> in which "
"case PATCH_THE_KERNEL shall be set to YES for you when you invoke "
"B<--added-patches\\ foo,> but not otherwise.  Also, please note that if any "
"patch installs a script in I<./debian/image.d/> directory, B<run-parts> "
"shall be called on that directory just before the kernel image package is "
"built. The location of the root of the image package being built shall be "
"passed in the environment variable B<IMAGE_TOP,> and the kernel versions is "
"passed in through the environment variable B<version.> This is a way for the "
"patch to insert any additional files into the image, for example."
msgstr ""

# type: Plain text
#: make-kpkg.8:251
msgid ""
"Some of the patch packages also pay attention to other environment "
"variables, and these are documented in the appropriate doc directory (for "
"example, you should look at "
"I</usr/share/doc/kernel-patch-foo/README-kernelpatch.Debian> for patch foo "
"for additional information)."
msgstr ""

# type: TP
#: make-kpkg.8:251
#, no-wrap
msgid "B<--arch\\ foo>"
msgstr ""

# type: Plain text
#: make-kpkg.8:264
msgid ""
"This is useful for setting the architecture when you are cross compiling. If "
"you are not cross compiling, the architecture is determined "
"automatically. The same effect can be achieved by setting the environment "
"variable B<KPKG_ARCH.> The value should be whatever B<DEB_HOST_ARCH_CPU> "
"contains when I<dpkg-architecture> is run on the target machine, or it can "
"be an other architecture in a multi-arch set (like i386/amd64)."
msgstr ""

# type: TP
#: make-kpkg.8:264
#, no-wrap
msgid "B<--cross-compile\\ foo>"
msgstr ""

# type: TP
#: make-kpkg.8:266
#, no-wrap
msgid "B<--cross_compile\\ foo>"
msgstr ""

# type: Plain text
#: make-kpkg.8:277
msgid ""
"This is useful for setting the target string when you are cross "
"compiling. Use the dummy target \"-\" if you are building for other arches "
"of a multiarch set, like i386/amd64. The same effect can be achieved by "
"setting the environment variable. Please note that this does not in any way "
"set the compiler the kernel build process shall use; if the default compiler "
"that the build process comes up with is not the one desired, please "
"explicitly specify the compiler that should be used.  B<CROSS_COMPILE>"
msgstr ""

# type: TP
#: make-kpkg.8:277
#, no-wrap
msgid "B<--subarch\\ foo>"
msgstr ""

# type: Plain text
#: make-kpkg.8:286
msgid ""
"Some architectures (the Alpha, and the m68k) require a different kernel for "
"each sub-architecture. This option provides a way of specifying it as an "
"argument to B<make-kpkg>. B<Please note> that additional support for "
"sub-architectures may be required in the kernel sources to actually make "
"this do anything. The same effect can be achieved by setting the environment "
"variable B<KPKG_SUBARCH>"
msgstr ""

# type: TP
#: make-kpkg.8:286
#, no-wrap
msgid "B<--arch-in-name>"
msgstr ""

# type: TP
#: make-kpkg.8:288
#, no-wrap
msgid "B<--arch_in_name>"
msgstr ""

# type: Plain text
#: make-kpkg.8:298
msgid ""
"This option uses an extended name for the kernel image package by embedding "
"the sub-architecture in the image name, so one could write a script to "
"create multiple sub-architectures one after the other. You may also do this "
"by setting the environment variable B<ARCH_IN_NAME.> B<Please note> that "
"only the package I<name> is affected, not modules locations etc."
msgstr ""

# type: TP
#: make-kpkg.8:298
#, no-wrap
msgid "B<--pgpsign> name"
msgstr ""

# type: Plain text
#: make-kpkg.8:309
msgid ""
"Set the string used to sign the B<changes> file for any external modules in "
"I</usr/src/modules/> using PGP. This option will override the builtin "
"default and the site wide customizations stored in the file "
"I</etc/kernel-pkg.conf> or I<~/.kernel-pkg.conf.>"
msgstr ""

# type: TP
#: make-kpkg.8:309
#, no-wrap
msgid "B<--config> target"
msgstr ""

# type: Plain text
#: make-kpkg.8:317
msgid ""
"Change the type of configure done from the default CW<oldconfig>.  I<target> "
"must be one of CW<oldconfig>, CW<config>, CW<menuconfig>, CW<gconfig>, "
"CW<xconfig>, CW<randconfig>,, CW<defconfig>, CW<allmodconfig>, "
"CW<allyesconfig>, CW<allnoconfig>; CW<old>, CW<menu>, CW<g>, or CW<x>."
msgstr ""

# type: Plain text
#: make-kpkg.8:328
msgid ""
"This option is particularly useful when using \\s-1PATCH_THE_KERNEL\\s0 if "
"some of the patches change what configuration options are available.  "
"B<Note> however that B<make-kpkg> scans the config file at startup for some "
"options, notably the fact that modules are enabled or not, so toggling the "
"status during the delayed configuration results in an error. If needed, "
"create the configuration file as close to the desired one before calling "
"make-kpkg with this switch."
msgstr ""

# type: TP
#: make-kpkg.8:328
#, no-wrap
msgid "B<--targets>"
msgstr ""

# type: Plain text
#: make-kpkg.8:333
msgid "Prints out a list of known targets. See the Section B<Targets> below."
msgstr ""

# type: TP
#: make-kpkg.8:333
#, no-wrap
msgid "B<--noexec>"
msgstr ""

# type: Plain text
#: make-kpkg.8:341
msgid ""
"Pass a B<-n> option to the I<make> process so that commands are merely "
"printed to the screen but not actually executed. This is very useful for "
"debugging."
msgstr ""

# type: TP
#: make-kpkg.8:341
#, no-wrap
msgid "B<--verbose>"
msgstr ""

# type: Plain text
#: make-kpkg.8:347
msgid ""
"This calls I<make> with the -V=1 option, which calls out the top level Make "
"commands, also useful in seeing what is happening."
msgstr ""

# type: TP
#: make-kpkg.8:347
#, no-wrap
msgid "B<--initrd>"
msgstr ""

# type: Plain text
#: make-kpkg.8:370
msgid ""
"If B<make-kpkg> is generating a I<kernel-image> package, perform any actions "
"necessary for a kernel loaded using B<initrd.> B<NOTE:> in older kernels, "
"this required a non-standard cramfs initrd patch to the kernel sources, "
"(unless the mkinitrd configuration was modified not to use cramfs) or may "
"result in a unbootable kernel. The patch was usually present in the kernel "
"sources shipped by Debian.  Some architectures still need patches to fix "
"cramfs problems. This option may include extra dependencies, and "
"modifications to maintainer scripts.  It has no effect when B<make-kpkg is "
"not making a> I<kernel-image> package. The same effect can be achieved by "
"setting the environment variable B<INITRD> to any non empty value."
msgstr ""

# type: TP
#: make-kpkg.8:370
#, no-wrap
msgid "B<--zimage>"
msgstr ""

# type: Plain text
#: make-kpkg.8:374
msgid ""
"Makes a zImage kernel rather than a bzImage kernel (the default).  Useful "
"for people having problems with bzImage kernels."
msgstr ""

# type: TP
#: make-kpkg.8:374
#, no-wrap
msgid "B<--bzimage>"
msgstr ""

# type: Plain text
#: make-kpkg.8:378
msgid ""
"Makes a bzImage kernel. Useful for people who want a bzImage kernel on sites "
"where the default is zImage kernels."
msgstr ""

# type: TP
#: make-kpkg.8:378
#, no-wrap
msgid "B<--mkimage>"
msgstr ""

# type: Plain text
#: make-kpkg.8:389
#, no-wrap
msgid ""
"This should be a command that produces an initrd image given a\n"
"directory. It is passed to the \n"
"I<mkinitrd>\n"
"program's \n"
"I<-m>\n"
"option. For example, it can be\n"
"  \"genromfs -d %s -f %s\"\n"
"or\n"
"  \"mkcramfs %s %s\"\n"
msgstr ""

# type: TP
#: make-kpkg.8:389
#, no-wrap
msgid "B<--rootcmd foo>"
msgstr ""

# type: Plain text
#: make-kpkg.8:400
msgid ""
"The command that provides a means of gaining super user access (for example, "
"`sudo' or `fakeroot') as needed by dpkg-buildpackage's -r option. This "
"option does not work for three of the targets, namely, I<binary, "
"binary-indep,> and I<binary-arch.> For those targets the entire I<make-kpkg> "
"command must be run as (fake)root."
msgstr ""

# type: TP
#: make-kpkg.8:400
#, no-wrap
msgid "B<--stem foo>"
msgstr ""

# type: Plain text
#: make-kpkg.8:410
msgid ""
"Call the packages foo-* instead of kernel-*. This is useful in helping "
"transition from calling the packages kernel-* to linux-* packages, in "
"preparation for non-linux kernels in the distribution. The default is "
"linux. The stem, since it is the initial part of a package name must consist "
"only of lower case letters (`a-z'), digits (`0-9'), plus (`+') and minus "
"(`-') signs, and periods (`.').  It must be at least two characters long and "
"must start with an alphanumeric character."
msgstr ""

# type: TP
#: make-kpkg.8:410
#, no-wrap
msgid "B<--us>"
msgstr ""

# type: Plain text
#: make-kpkg.8:415
msgid ""
"This option is passed to dpkg-buildpackage, and directs that package not to "
"sign the source. This is only relevant for the buildpackage target."
msgstr ""

# type: TP
#: make-kpkg.8:415
#, no-wrap
msgid "B<--uc>"
msgstr ""

# type: Plain text
#: make-kpkg.8:420
msgid ""
"This option is passed to dpkg-buildpackage, and directs that package not to "
"sign the changelog. This is only relevant for the buildpackage target."
msgstr ""

# type: Plain text
#: make-kpkg.8:426
msgid ""
"The options maybe shortened to the smallest unique string, and may be "
"entered with either a - or a -- prefix, and you may use a space or an = "
"symbol between an option string and a value. You may also use the form "
"option=value; for details these and other variant forms supported, please "
"read man Getopt::Long (3perl)."
msgstr ""

# type: Plain text
#: make-kpkg.8:441
#, no-wrap
msgid ""
"If defined, this environment variable sets the concurrency level of\n"
"make used to compile the kernel and the modules set using\n"
"I<-j>\n"
"flags to the sub make in the \n"
"B<build>\n"
"target of \n"
"B<make-kpkg.>\n"
"Should be a (small) integer, if used. You can get the current number\n"
"of CPUs using the command:\n"
" \"grep -c '^processor' /proc/cpuinfo\"\n"
"B<WARNING:>\n"
"Do NOT set the -j option in MAKEFLAGS directly, this shall call the\n"
"build to fail. \n"
msgstr ""

# type: SH
#: make-kpkg.8:441
#, no-wrap
msgid "TARGETS"
msgstr ""

# type: TP
#: make-kpkg.8:442
#, no-wrap
msgid "B<clean>"
msgstr ""

# type: Plain text
#: make-kpkg.8:459
msgid ""
"Cleans the kernel source directory of all files created by target B<build,> "
"and runs a make distclean. (Please look at a Linux kernel Makefile for "
"details).  Please note that although we take care of the list of current "
"kernel configuration contained in the file I<.config,> the file "
"I<include/linux/autoconf.h> is not preserved. This target should not be "
"combined with other targets, since B<make-kpkg> reads in all data I<before> "
"running any target, so the subsequent targets shall be run with the old "
"data, which may not be what you want."
msgstr ""

# type: TP
#: make-kpkg.8:459
#, no-wrap
msgid "B<buildpackage>"
msgstr ""

# type: Plain text
#: make-kpkg.8:467
msgid ""
"This target runs the targets B<clean,> and B<binary,> and produces the "
"complete package using B<dpkg-buildpackage>"
msgstr ""

# type: TP
#: make-kpkg.8:467
#, no-wrap
msgid "B<binary>"
msgstr ""

# type: Plain text
#: make-kpkg.8:479
msgid ""
"This target produces all four Debian kernel packages by running the targets "
"B<binary-indep> and B<binary-arch.> However, this requires I<make-kpkg> to "
"be run as root (or fakeroot), since I<--rootcmd> will not work."
msgstr ""

# type: TP
#: make-kpkg.8:479
#, no-wrap
msgid "B<binary-indep>"
msgstr ""

# type: Plain text
#: make-kpkg.8:492
msgid ""
"This target produces the arch independent packages by running the targets "
"B<kernel_source,> B<kernel_manual> and B<kernel_doc.> However, this also "
"requires I<make-kpkg> to be run as root (or fakeroot), since I<--rootcmd> "
"will not work."
msgstr ""

# type: TP
#: make-kpkg.8:492
#, no-wrap
msgid "B<binary-arch>"
msgstr ""

# type: Plain text
#: make-kpkg.8:504
msgid ""
"This target produces the arch dependent packages by running the targets "
"B<kernel_headers> and However, this also requires I<make-kpkg> to be run as "
"root (or fakeroot), since I<--rootcmd> will not work.  B<kernel_image.>"
msgstr ""

# type: TP
#: make-kpkg.8:504
#, no-wrap
msgid "B<kernel_source>"
msgstr ""

# type: Plain text
#: make-kpkg.8:527
msgid ""
"This target produces a debianised package of the Linux kernel sources.  If "
"the environment variable B<SOURCE_CLEAN_HOOK> points to an executable, then "
"that executable shall be run from the temporary (top) directory of the "
"kernel sources just before packaging it, "
"I<./debian/tmp-source/usr/src/kernel-source-X.X.XX,> so people may take any "
"action they see fit (remove arch trees, prune version control directories, "
"I<find . -type d -name CVS -prune -exec rm -rf {} \\;> etc). This has no "
"effect on anything other than the kernel sources that are being packaged -- "
"if the script operates on the current directory and its children, the "
"original source tree should remain intact. The environment variables "
"B<HEADER_CLEAN_HOOK> and B<DOC_CLEAN_HOOK> are similar. They should point to "
"executables, then that executable shall be run from the temporary (top) "
"directory of the kernel headers and documentation just before packaging "
"respectively, so people may take any action they see fit. This also has no "
"effect on anything other than the sources that are being packaged."
msgstr ""

# type: TP
#: make-kpkg.8:527
#, no-wrap
msgid "B<kernel_headers>"
msgstr ""

# type: Plain text
#: make-kpkg.8:531
msgid ""
"This target produces a Debian package containing the header files included "
"in the Linux kernel."
msgstr ""

# type: TP
#: make-kpkg.8:531
#, no-wrap
msgid "B<kernel_manual>"
msgstr ""

# type: Plain text
#: make-kpkg.8:538
msgid ""
"This target produces a Debian package containing the section 9 manual pages "
"included in the Linux kernel. Please note that this is not really an "
"independent target; calling this shall also invoke the I<kernel_doc> target, "
"and creates a kernel-doc package at the same time."
msgstr ""

# type: TP
#: make-kpkg.8:538
#, no-wrap
msgid "B<kernel_doc>"
msgstr ""

# type: Plain text
#: make-kpkg.8:544
msgid ""
"This target produces a Debian package containing the documentation included "
"in the Linux kernel. This can be called independently of the "
"I<kernel_manual> target, but not the other way around."
msgstr ""

# type: TP
#: make-kpkg.8:544
#, no-wrap
msgid "B<kernel_image>"
msgstr ""

# type: Plain text
#: make-kpkg.8:555
msgid ""
"This target produces a Debian package of the Linux kernel source image, and "
"any modules configured in the kernel configuration file I<.config.> If there "
"is no I<.config> file in the kernel source directory, a default "
"configuration is provided similar to the one used to create the B<Debian> "
"boot-floppies."
msgstr ""

# type: Plain text
#: make-kpkg.8:570
msgid ""
"If the file I<./debian/post-install> exists, and is an executable, it is run "
"just before the kernel image package is created.  Also, please note that if "
"there are any scripts in I<./debian/image.d/> directory, B<run-parts> shall "
"be called on that directory just before the kernel image package is "
"built. The location of the root of the image package being built shall be "
"passed in the environment variable B<IMAGE_TOP,> and the kernel versions is "
"passed in through the environment variable B<version> for all these scripts."
msgstr ""

# type: Plain text
#: make-kpkg.8:582
msgid ""
"On initial installation, the image package updates symbolic links in the "
"symbolic link destination directory (the root directory by default) to point "
"to the new kernel image in the image directory, which is nominally I</boot.> "
"If the symbolic link already points to the current kernel image, no action "
"is taken.  If a prior symbolic link exists, it is rotated out with a "
"suffix.old, and a new symbolic link, properly updated is installed in its "
"place (the variable minimal_swap in I</etc/kernel-img.conf> further modifies "
"this behaviour). No action is taken on upgrades."
msgstr ""

# type: Plain text
#: make-kpkg.8:590
msgid ""
"Please see the documentation about hooks in B<kernel-img.conf(5).> These "
"hooks are variables that can be pointed by the local sysadmin to scripts "
"that add or remove a line from the grub menu list at kernel image install "
"and remove times. A sample script to add lines to a grub menu file is "
"included in the directory I</usr/share/doc/kernel-package/.>"
msgstr ""

# type: Plain text
#: make-kpkg.8:622
msgid ""
"Apart from hook variables that the local admin may set, there are a set of "
"directories where packages, or the local admin, may drop in script "
"files. The directories are I</etc/kernel/preinst.d/,> "
"I</etc/kernel/postinst.d/,> I</etc/kernel/prerm.d/,> "
"I</etc/kernel/postrm.d/,> and I</etc/kernel/preinst.d/E<lt>VERSIONE<gt>/,> "
"I</etc/kernel/postinst.d/E<lt>VERSIONE<gt>/,> "
"I</etc/kernel/prerm.d/E<lt>VERSIONE<gt>/,> "
"I</etc/kernel/postrm.d/E<lt>VERSIONE<gt>/.> If they exists, the kernel-image "
"package shall run a B<run-parts> program over the directory (including the "
"versioned one), giving the version being installed or removed as an "
"argument, in the corresponding phase of installation or removal. Before "
"calling these scripts, the env variable B<STEM> shall be set to the value of "
"the I<--stem> argument (or the default value, linux). These scripts shall be "
"called with two arguments, the first being the I<version> of the kernel "
"image, and the second argument being the I<location> of the kernel image "
"itself. Since debconf is in use before the script is called, this script "
"should issue no diagnostic messgaes to stdout -- while the postinst does "
"call B<db_stop> , debconf does not restore stdout, so messages to stdout "
"disappear."
msgstr ""

# type: Plain text
#: make-kpkg.8:639
msgid ""
"On installation, it also offers to run the Linux loader, I<LILO> (or "
"alternates like I<loadlin, SILO, QUIK, VMELILO, ZIPL, yaboot, PALO> or "
"I<GRUB> ), creating a configuration file for supported boot loaders if "
"needed. At that time it also offers to put the new kernel on a floppy, "
"formatting the floppy if needed.  On deletion, the package checks the "
"version of the kernel running, and refuses to delete a running kernel.  "
"I<grub> rates a special mention here, since grub may not need to be rerun "
"after installing a kernel image, though an automated change to the menu list "
"would be nice on install and removal of kernel image packages."
msgstr ""

# type: TP
#: make-kpkg.8:639
#, no-wrap
msgid "B<build>"
msgstr ""

# type: Plain text
#: make-kpkg.8:646
msgid ""
"This target, used by target B<kernel_image> above, compiles the Linux kernel "
"image."
msgstr ""

# type: TP
#: make-kpkg.8:646
#, no-wrap
msgid "B<modules>"
msgstr ""

# type: Plain text
#: make-kpkg.8:668
msgid ""
"This target allows you to build all add-on modules and packages that are "
"very dependent on the precise kernel version they are compiled for at the "
"same time you build your kernel image.  This target expects to find the "
"modules or packages under /usr/src/modules, and, for all such directories, "
"changes to MODULE_LOC/x (MODULE_LOC defaults to I</usr/src/modules.> ), and "
"runs the B<kdist> rule in the local I<debian.rules> file. This target should "
"create the B<Debian> module package(s), and may also produce a compressed "
"tar file, and a compressed diff file, with I<md5sums> recorded in a changes "
"file using B<dpkg-genchanges.> The file is signed by the same identity that "
"would be used to sign the kernel packages. This option is used by "
"maintainers uploading the package to the Debian archives."
msgstr ""

# type: TP
#: make-kpkg.8:668
#, no-wrap
msgid "B<modules_config>"
msgstr ""

# type: Plain text
#: make-kpkg.8:677
msgid ""
"This target allows you to configure all packages under B<MODULE_LOC,> which "
"defaults to B</usr/src/modules.> This is useful if you need to manually "
"modify some aspects of the configuration, or if you want to manually compile "
"the add on modules.  This should not be called unless you already have a "
"./debian directory."
msgstr ""

# type: TP
#: make-kpkg.8:677
#, no-wrap
msgid "B<modules_image>"
msgstr ""

# type: Plain text
#: make-kpkg.8:693
msgid ""
"This target allows you to build all packages under B<MODULE_LOC,> which "
"defaults to B</usr/src/modules,> but does not create the source or diff "
"files, and does not create and sign a changes file. This is the only modules "
"related option you need if you just want to compile the add on modules image "
"files for installation on one or more machines. Generally called in "
"conjunction with B<kernel_image,> especially if also using the option "
"B<append_to_version> (prevents spurious warnings).  This should not be "
"called unless you already have a ./debian directory."
msgstr ""

# type: TP
#: make-kpkg.8:693
#, no-wrap
msgid "B<modules_clean>"
msgstr ""

# type: Plain text
#: make-kpkg.8:702
msgid ""
"This target allows you to clean all packages under B<MODULE_LOC,> which "
"defaults to B</usr/src/modules,> and this should be all that is needed to "
"undo the effect of any of the other modules_ targets.  This should not be "
"called unless you already have a ./debian directory."
msgstr ""

# type: TP
#: make-kpkg.8:702
#, no-wrap
msgid "B<configure>"
msgstr ""

# type: Plain text
#: make-kpkg.8:715
msgid ""
"This target runs configure (actually, B<config_target,> set by B<--config> "
"which defaults to I<oldconfig> ) early, so you may edit files generated by "
"B<make config> in the kernel source directory and not have them stomped by "
"B<make-kpkg> later."
msgstr ""

# type: Plain text
#: make-kpkg.8:724
msgid ""
"This target creates the I<./debian> directory, and optionally patches the "
"source. This target is called by the B<configure> target. You may use this "
"target to have the sources patched, and then manually run the configuration "
"step to update the configuration file, with any new configuration options "
"the patches may have introduced."
msgstr ""

# type: TP
#: make-kpkg.8:724
#, no-wrap
msgid "B<libc-kheaders>"
msgstr ""

# type: Plain text
#: make-kpkg.8:736
msgid ""
"This is a special target for the libc-dev maintainer, who can use it to "
"create the headers package that libc needs. Please note that it is dangerous "
"to create a libc-kheaders package that is different from the headers libc "
"was compiled with; it is B<known> to subtly break systems. Please look at "
"I</usr/share/kernel-package/README.headers> for details.  Creating and "
"installing a self created libc-kheaders package may break your system unless "
"you know what you are doing. You have been warned."
msgstr ""

# type: SH
#: make-kpkg.8:736
#, no-wrap
msgid "ENVIRONMENT VARIABLES"
msgstr ""

# type: Plain text
#: make-kpkg.8:758
msgid ""
"I<KPKG_DEBUG,> if set, causes make-kpkg to spit out debugging messages about "
"some shell functions executed internally. This is probably of not interest "
"to anyone not debugging B<make-kpkg.> The following variables (documented "
"above) also affect B<make-kpkg:> I<DEBIAN_REVISION_MANDATORY> "
"I<APPEND_TO_VERSION> I<VERSION_H_OK> I<PATCH_THE_KERNEL> "
"I<NO_UNPATCH_BY_DEFAULT> I<KPKG_ARCH> I<CROSS_COMPILE> I<KPKG_SUBARCH> "
"I<ARCH_IN_NAME> I<INITRD> I<SOURCE_CLEAN_HOOK> I<MODULE_LOC> "
"I<CONCURRENCY_LEVEL> I<IGNORE_UPPERCASE_VERSION>"
msgstr ""

# type: Plain text
#: make-kpkg.8:783
msgid ""
"Apart from the runtime options, the I<debian.rules> file run by B<make-kpkg> "
"also looks for a per user configuration file I<~/.kernel-pkg.conf.> Failing "
"that, it looks for site-wide defaults in the file I</etc/kernel-pkg.conf.> "
"The default configuration allows there to be a site wide override for the "
"full name and email address of the person responsible for maintaining the "
"kernel packages on the site, but the I</etc/kernel-pkg.conf> (or "
"I<~/.kernel-pkg.conf.> ) file is actually a Makefile snippet, and any legal "
"make directives may be included in there.  B<Note:> Caution is urged with "
"this file, since you can totally change the way that the make is run by "
"suitably editing this file. Please look at "
"I</usr/share/doc/kernel-package/Problems.gz> for a list of known problems "
"while compiling kernel images. Extensive tutorial like documentation is also "
"available in I</usr/share/doc/kernel-package/README.gz> and it is "
"recommended that one read that before using this utility."
msgstr ""

# type: Plain text
#: make-kpkg.8:795
msgid ""
"B<kernel-pkg.conf>(5), B<kernel-img.conf>(5), B<mkinitrd>(8), "
"B<Getopt::Long>(3perl), B<dpkg-deb>(1), B<dpkg-source>(1), B<make>(1), "
"B<The\\ Programmers\\ manual,> B<The\\ GNU\\ Make\\ manual,> and the "
"extensive documentation in the directory B</usr/share/doc/kernel-package>"
msgstr ""
